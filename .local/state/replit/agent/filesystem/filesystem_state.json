{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an AI-powered hedge fund simulation application that creates a realistic investment advisory platform where AI investor personas analyze stocks and engage in debates. The system features multiple legendary investor personalities (Warren Buffett, Cathie Wood, Peter Lynch, etc.) that provide personalized stock analysis, participate in investment debates, and offer portfolio recommendations. The application combines real-time financial data with AI-generated insights to create an engaging investment education and analysis tool.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and dark theme support\n- **Mobile-First Design**: Responsive layout optimized for mobile with bottom navigation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js web framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints for stocks, personas, analyses, debates, portfolio, and news\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n- **Development**: Hot module replacement via Vite integration for development mode\n\n## Data Storage\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon Database (serverless PostgreSQL) via `@neondatabase/serverless`\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Data Modeling**: Structured tables for investor personas, stocks, analyses, debates, portfolio positions, and news articles\n\n## AI Integration\n- **Provider**: OpenAI API for generating persona-based stock analyses and debate content\n- **Analysis Engine**: Each investor persona provides unique investment recommendations with confidence scores\n- **Debate System**: AI-powered discussions between different investor personalities\n- **Consensus Building**: Algorithmic consensus scoring based on multiple persona analyses\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: PostgreSQL via Neon Database serverless platform\n- **AI Services**: OpenAI API for GPT-powered analysis and content generation\n- **Financial Data**: Multiple provider support (Alpha Vantage, Financial Datasets API)\n- **News API**: NewsAPI.org for market and stock-specific news feeds\n\n### Development Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **Code Quality**: TypeScript for type safety and better developer experience\n- **UI Components**: Radix UI primitives with Shadcn/ui component library\n- **Styling**: Tailwind CSS with PostCSS for processing\n\n### Authentication & Session Management\n- **Session Storage**: PostgreSQL-based session storage via `connect-pg-simple`\n- **Security**: Express session middleware for user state management\n\n### Monitoring & Development\n- **Error Handling**: Replit-specific error overlay and development tools\n- **Logging**: Custom request/response logging with performance timing\n- **Development**: Replit-integrated development environment with cartographer and dev banner plugins\n\n### Data Validation\n- **Schema Validation**: Zod for runtime type checking and API validation\n- **Database Validation**: Drizzle-Zod integration for database schema validation\n- **Form Handling**: React Hook Form with Hookform resolvers for client-side validation","size_bytes":3679},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":6533},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { openaiService } from \"./services/openai\";\nimport { financialDataService } from \"./services/financial-data\";\nimport { newsService } from \"./services/news\";\nimport { \n  insertStockSchema, \n  insertStockAnalysisSchema, \n  insertDebateSchema, \n  insertPortfolioPositionSchema,\n  insertChatConversationSchema,\n  insertChatMessageSchema,\n  insertPortfolioUploadSchema\n} from \"@shared/schema\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Personas endpoints\n  app.get(\"/api/personas\", async (req, res) => {\n    try {\n      const personas = await storage.getPersonas();\n      res.json(personas);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch personas\" });\n    }\n  });\n\n  // Stocks endpoints\n  app.get(\"/api/stocks\", async (req, res) => {\n    try {\n      const stocks = await storage.getStocks();\n      res.json(stocks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stocks\" });\n    }\n  });\n\n  app.get(\"/api/stocks/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n\n      const results = await financialDataService.searchStocks(q);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search stocks\" });\n    }\n  });\n\n  app.get(\"/api/stocks/:symbol\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      \n      // Try to get from storage first\n      let stock = await storage.getStockBySymbol(symbol.toUpperCase());\n      \n      if (!stock) {\n        // Fetch from external API and create\n        const stockData = await financialDataService.getStockQuote(symbol);\n        const financialMetrics = await financialDataService.getFinancialMetrics(symbol).catch(() => null);\n        \n        stock = await storage.createStock({\n          symbol: stockData.symbol,\n          name: stockData.name,\n          currentPrice: stockData.price.toString(),\n          priceChange: stockData.change.toString(),\n          priceChangePercent: stockData.changePercent.toString(),\n          marketData: {\n            ...stockData,\n            ...(financialMetrics ? { financialMetrics } : {})\n          }\n        });\n      } else {\n        // Update with fresh data\n        const stockData = await financialDataService.getStockQuote(symbol);\n        stock = await storage.updateStock(stock.id, {\n          currentPrice: stockData.price.toString(),\n          priceChange: stockData.change.toString(),\n          priceChangePercent: stockData.changePercent.toString(),\n          marketData: stockData\n        });\n      }\n\n      res.json(stock);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock data\" });\n    }\n  });\n\n  // Stock analysis endpoints\n  app.post(\"/api/stocks/:symbol/analyze\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      \n      // Get or create stock\n      let stock = await storage.getStockBySymbol(symbol.toUpperCase());\n      if (!stock) {\n        const stockData = await financialDataService.getStockQuote(symbol);\n        stock = await storage.createStock({\n          symbol: stockData.symbol,\n          name: stockData.name,\n          currentPrice: stockData.price.toString(),\n          priceChange: stockData.change.toString(),\n          priceChangePercent: stockData.changePercent.toString(),\n          marketData: { ...stockData }\n        });\n      }\n\n      // Get personas and analyze\n      const personas = await storage.getPersonas();\n      const newsArticles = await newsService.getStockNews(symbol);\n      const newsContext = newsArticles.map(article => article.title);\n\n      const analyses = [];\n      for (const persona of personas) {\n        try {\n          const analysis = await openaiService.analyzeStockByPersona(\n            persona,\n            stock,\n            stock.marketData,\n            newsContext\n          );\n\n          const savedAnalysis = await storage.createAnalysis({\n            stockId: stock.id,\n            personaId: persona.id,\n            recommendation: analysis.recommendation,\n            confidenceScore: analysis.confidenceScore,\n            reasoning: analysis.reasoning,\n            targetPrice: analysis.targetPrice?.toString()\n          });\n\n          analyses.push({ persona, analysis: savedAnalysis });\n        } catch (error) {\n          console.error(`Failed to analyze with ${persona.name}:`, error);\n        }\n      }\n\n      // Generate consensus\n      const consensusResult = await openaiService.generateConsensus(\n        stock,\n        analyses.map(({ persona, analysis }) => ({\n          persona,\n          analysis: {\n            recommendation: analysis.recommendation as any,\n            confidenceScore: analysis.confidenceScore,\n            reasoning: analysis.reasoning,\n            targetPrice: analysis.targetPrice ? parseFloat(analysis.targetPrice) : undefined\n          }\n        }))\n      );\n\n      res.json({\n        stock,\n        analyses,\n        consensus: consensusResult\n      });\n    } catch (error) {\n      console.error(\"Analysis error:\", error);\n      res.status(500).json({ message: \"Failed to analyze stock\" });\n    }\n  });\n\n  app.get(\"/api/stocks/:symbol/analyses\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const stock = await storage.getStockBySymbol(symbol.toUpperCase());\n      \n      if (!stock) {\n        return res.status(404).json({ message: \"Stock not found\" });\n      }\n\n      const analyses = await storage.getAnalysesByStock(stock.id);\n      const enrichedAnalyses = [];\n\n      for (const analysis of analyses) {\n        const persona = await storage.getPersona(analysis.personaId);\n        if (persona) {\n          enrichedAnalyses.push({\n            ...analysis,\n            persona\n          });\n        }\n      }\n\n      res.json(enrichedAnalyses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch analyses\" });\n    }\n  });\n\n  app.get(\"/api/analyses/latest\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const analyses = await storage.getLatestAnalyses(limit);\n      res.json(analyses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch latest analyses\" });\n    }\n  });\n\n  // Portfolio endpoints\n  app.get(\"/api/portfolio\", async (req, res) => {\n    try {\n      const positions = await storage.getPortfolioPositions();\n      \n      // Calculate portfolio summary\n      let totalValue = 0;\n      let totalReturn = 0;\n      let totalReturnPercent = 0;\n      let totalConsensusScore = 0;\n\n      for (const position of positions) {\n        const currentValue = parseFloat(position.currentValue || \"0\");\n        const returnAmount = parseFloat(position.totalReturn || \"0\");\n        const returnPercent = parseFloat(position.returnPercent || \"0\");\n        const consensusScore = position.consensusScore || 0;\n\n        totalValue += currentValue;\n        totalReturn += returnAmount;\n        totalReturnPercent += returnPercent;\n        totalConsensusScore += consensusScore;\n      }\n\n      if (positions.length > 0) {\n        totalReturnPercent = totalReturnPercent / positions.length;\n        totalConsensusScore = totalConsensusScore / positions.length;\n      }\n\n      res.json({\n        positions,\n        summary: {\n          totalValue,\n          totalReturn,\n          totalReturnPercent,\n          consensusScore: totalConsensusScore\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch portfolio\" });\n    }\n  });\n\n  app.post(\"/api/portfolio\", async (req, res) => {\n    try {\n      console.log(\"Portfolio POST request body:\", req.body);\n      const { symbol, shares, price } = req.body;\n      \n      console.log(\"Extracted values:\", { symbol, shares, price });\n      \n      if (!symbol || !shares || !price) {\n        console.log(\"Validation failed - missing fields\");\n        return res.status(400).json({ message: \"Symbol, shares, and price are required\" });\n      }\n\n      // Get or create stock\n      let stock = await storage.getStockBySymbol(symbol.toUpperCase());\n      if (!stock) {\n        const stockData = await financialDataService.getStockQuote(symbol);\n        stock = await storage.createStock({\n          symbol: stockData.symbol,\n          name: stockData.name,\n          currentPrice: stockData.price.toString(),\n          priceChange: stockData.change.toString(),\n          priceChangePercent: stockData.changePercent.toString(),\n          marketData: stockData\n        });\n      }\n\n      // Calculate current value and return\n      const currentPrice = parseFloat(stock.currentPrice || \"0\");\n      const sharesNum = parseFloat(shares);\n      const avgPrice = parseFloat(price);\n      const currentValue = currentPrice * sharesNum;\n      const totalReturn = currentValue - (avgPrice * sharesNum);\n      const returnPercent = avgPrice > 0 ? ((currentPrice - avgPrice) / avgPrice) * 100 : 0;\n\n      const position = await storage.createPortfolioPosition({\n        stockId: stock.id,\n        shares: shares.toString(),\n        averagePrice: price.toString(),\n        currentValue: currentValue.toString(),\n        totalReturn: totalReturn.toString(),\n        returnPercent: returnPercent.toString(),\n        consensusScore: 75 // Default consensus score\n      });\n\n      res.json(position);\n    } catch (error) {\n      console.error(\"Portfolio error:\", error);\n      res.status(500).json({ message: \"Failed to add to portfolio\" });\n    }\n  });\n\n  // Debates endpoints\n  app.get(\"/api/debates\", async (req, res) => {\n    try {\n      const debates = await storage.getDebates();\n      res.json(debates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch debates\" });\n    }\n  });\n\n  app.get(\"/api/stocks/:symbol/debates\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const stock = await storage.getStockBySymbol(symbol.toUpperCase());\n      \n      if (!stock) {\n        return res.status(404).json({ message: \"Stock not found\" });\n      }\n\n      const debates = await storage.getDebatesByStock(stock.id);\n      res.json(debates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch debates\" });\n    }\n  });\n\n  app.post(\"/api/debates\", async (req, res) => {\n    try {\n      const validation = insertDebateSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid debate data\" });\n      }\n\n      const debate = await storage.createDebate(validation.data);\n      res.json(debate);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create debate\" });\n    }\n  });\n\n  // News endpoints\n  app.get(\"/api/news\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 20;\n      const articles = await newsService.getMarketNews(limit);\n      \n      // Store in database for persistence\n      for (const article of articles) {\n        try {\n          await storage.createNewsArticle({\n            title: article.title,\n            description: article.description,\n            url: article.url,\n            imageUrl: article.urlToImage,\n            source: article.source.name,\n            publishedAt: new Date(article.publishedAt),\n            stockSymbols: [], // Would need NLP to extract stock symbols\n            sentiment: \"NEUTRAL\",\n            impact: \"MEDIUM\"\n          });\n        } catch (error) {\n          // Article might already exist, ignore\n        }\n      }\n\n      res.json(articles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch news\" });\n    }\n  });\n\n  app.get(\"/api/news/stocks/:symbol\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const articles = await newsService.getStockNews(symbol);\n      res.json(articles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock news\" });\n    }\n  });\n\n  // Chat endpoints\n  app.get(\"/api/chat/conversations\", async (req, res) => {\n    try {\n      const conversations = await storage.getChatConversations();\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.post(\"/api/chat/conversations\", async (req, res) => {\n    try {\n      const validation = insertChatConversationSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid conversation data\" });\n      }\n\n      const conversation = await storage.createChatConversation(validation.data);\n      res.json(conversation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  app.get(\"/api/chat/conversations/:id/messages\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const messages = await storage.getChatMessages(id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/chat/conversations/:id/messages\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const messageData = { ...req.body, conversationId: id };\n      \n      const validation = insertChatMessageSchema.safeParse(messageData);\n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid message data\" });\n      }\n\n      // Save user message\n      const userMessage = await storage.createChatMessage(validation.data);\n\n      // Generate AI consensus response\n      if (validation.data.role === \"user\") {\n        try {\n          // Get current portfolio for context\n          const portfolio = await storage.getPortfolioPositions();\n          const portfolioContext = portfolio.map(pos => ({\n            symbol: pos.stock.symbol,\n            name: pos.stock.name,\n            shares: pos.shares,\n            avgPrice: pos.averagePrice,\n            currentValue: pos.currentValue,\n            return: pos.returnPercent\n          }));\n\n          // Get AI personas for consensus response\n          const personas = await storage.getPersonas();\n          \n          const aiResponse = await openaiService.generateConsensusChat(\n            validation.data.content,\n            portfolioContext,\n            personas\n          );\n\n          // Save AI response\n          const aiMessage = await storage.createChatMessage({\n            conversationId: id,\n            role: \"assistant\",\n            content: aiResponse.response,\n            metadata: { consensusScore: aiResponse.consensusScore, personas: personas.map(p => p.name) }\n          });\n\n          res.json({ userMessage, aiMessage });\n        } catch (aiError) {\n          console.error(\"AI response failed:\", aiError);\n          // Return just user message if AI fails\n          res.json({ userMessage, aiMessage: null });\n        }\n      } else {\n        res.json({ userMessage });\n      }\n    } catch (error) {\n      console.error(\"Chat message error:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Portfolio upload endpoints\n  app.post(\"/api/portfolio/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.post(\"/api/portfolio/process-upload\", async (req, res) => {\n    try {\n      const { fileName, fileUrl } = req.body;\n      \n      if (!fileName || !fileUrl) {\n        return res.status(400).json({ message: \"fileName and fileUrl are required\" });\n      }\n\n      // Create portfolio upload record\n      const upload = await storage.createPortfolioUpload({\n        fileName,\n        fileUrl,\n        status: \"PROCESSING\"\n      });\n\n      // TODO: Process CSV/Excel file and extract positions\n      // For now, return the upload record\n      res.json(upload);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to process upload\" });\n    }\n  });\n\n  // Object storage endpoint for serving uploaded files\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17059},"server/storage.ts":{"content":"import { \n  type InvestorPersona, \n  type InsertInvestorPersona,\n  type Stock,\n  type InsertStock,\n  type StockAnalysis,\n  type InsertStockAnalysis,\n  type Debate,\n  type InsertDebate,\n  type PortfolioPosition,\n  type InsertPortfolioPosition,\n  type NewsArticle,\n  type InsertNewsArticle,\n  type ChatConversation,\n  type InsertChatConversation,\n  type ChatMessage,\n  type InsertChatMessage,\n  type PortfolioUpload,\n  type InsertPortfolioUpload,\n  investorPersonas,\n  stocks,\n  stockAnalyses,\n  debates,\n  portfolioPositions,\n  newsArticles,\n  chatConversations,\n  chatMessages,\n  portfolioUploads\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Personas\n  getPersonas(): Promise<InvestorPersona[]>;\n  getPersona(id: string): Promise<InvestorPersona | undefined>;\n  createPersona(persona: InsertInvestorPersona): Promise<InvestorPersona>;\n\n  // Stocks\n  getStocks(): Promise<Stock[]>;\n  getStock(id: string): Promise<Stock | undefined>;\n  getStockBySymbol(symbol: string): Promise<Stock | undefined>;\n  createStock(stock: InsertStock): Promise<Stock>;\n  updateStock(id: string, updates: Partial<Stock>): Promise<Stock | undefined>;\n\n  // Stock Analyses\n  getAnalysesByStock(stockId: string): Promise<StockAnalysis[]>;\n  getAnalysisByStockAndPersona(stockId: string, personaId: string): Promise<StockAnalysis | undefined>;\n  createAnalysis(analysis: InsertStockAnalysis): Promise<StockAnalysis>;\n  getLatestAnalyses(limit?: number): Promise<(StockAnalysis & { stock: Stock; persona: InvestorPersona })[]>;\n\n  // Debates\n  getDebates(): Promise<Debate[]>;\n  getDebate(id: string): Promise<Debate | undefined>;\n  getDebatesByStock(stockId: string): Promise<Debate[]>;\n  createDebate(debate: InsertDebate): Promise<Debate>;\n  updateDebate(id: string, updates: Partial<Debate>): Promise<Debate | undefined>;\n\n  // Portfolio\n  getPortfolioPositions(): Promise<(PortfolioPosition & { stock: Stock })[]>;\n  getPortfolioPosition(id: string): Promise<PortfolioPosition | undefined>;\n  getPortfolioPositionByStock(stockId: string): Promise<PortfolioPosition | undefined>;\n  createPortfolioPosition(position: InsertPortfolioPosition): Promise<PortfolioPosition>;\n  updatePortfolioPosition(id: string, updates: Partial<PortfolioPosition>): Promise<PortfolioPosition | undefined>;\n  deletePortfolioPosition(id: string): Promise<boolean>;\n\n  // News\n  getNewsArticles(limit?: number): Promise<NewsArticle[]>;\n  getNewsArticlesByStock(symbols: string[]): Promise<NewsArticle[]>;\n  createNewsArticle(article: InsertNewsArticle): Promise<NewsArticle>;\n\n  // Chat\n  getChatConversations(): Promise<ChatConversation[]>;\n  getChatConversation(id: string): Promise<ChatConversation | undefined>;\n  createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation>;\n  getChatMessages(conversationId: string): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n\n  // Portfolio Uploads\n  getPortfolioUploads(): Promise<PortfolioUpload[]>;\n  getPortfolioUpload(id: string): Promise<PortfolioUpload | undefined>;\n  createPortfolioUpload(upload: InsertPortfolioUpload): Promise<PortfolioUpload>;\n  updatePortfolioUpload(id: string, updates: Partial<PortfolioUpload>): Promise<PortfolioUpload | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.initializePersonas();\n  }\n\n  private async initializePersonas() {\n    try {\n      const existingPersonas = await db.select().from(investorPersonas).limit(1);\n      if (existingPersonas.length > 0) return;\n\n      const defaultPersonas: InsertInvestorPersona[] = [\n        {\n          name: \"Warren Buffett\",\n          description: \"The Oracle of Omaha - Value investing legend focused on long-term intrinsic value\",\n          avatar: \"🧙‍♂️\",\n          investmentStyle: \"Value\",\n          personalityTraits: [\"patient\", \"analytical\", \"conservative\", \"long-term focused\"]\n        },\n        {\n          name: \"Cathie Wood\",\n          description: \"Innovation investor focused on disruptive technology and exponential growth\",\n          avatar: \"🚀\",\n          investmentStyle: \"Growth/Innovation\", \n          personalityTraits: [\"visionary\", \"risk-taking\", \"tech-focused\", \"disruptive\"]\n        },\n        {\n          name: \"Peter Lynch\",\n          description: \"Growth at a reasonable price (GARP) investor with focus on understandable businesses\",\n          avatar: \"📊\",\n          investmentStyle: \"GARP\",\n          personalityTraits: [\"practical\", \"research-driven\", \"opportunistic\", \"retail-focused\"]\n        },\n        {\n          name: \"Michael Burry\",\n          description: \"Contrarian value investor known for contrarian bets and deep fundamental analysis\",\n          avatar: \"🕵️\",\n          investmentStyle: \"Deep Value/Contrarian\",\n          personalityTraits: [\"contrarian\", \"analytical\", \"skeptical\", \"independent\"]\n        },\n        {\n          name: \"Bill Ackman\",\n          description: \"Activist investor focused on high-conviction concentrated positions\",\n          avatar: \"⚡\",\n          investmentStyle: \"Activist/Concentrated\",\n          personalityTraits: [\"activist\", \"high-conviction\", \"concentrated\", \"outspoken\"]\n        }\n      ];\n\n      await db.insert(investorPersonas).values(defaultPersonas);\n    } catch (error) {\n      console.log(\"Personas might already exist or database not ready:\", error);\n    }\n  }\n\n  // Personas\n  async getPersonas(): Promise<InvestorPersona[]> {\n    return await db.select().from(investorPersonas);\n  }\n\n  async getPersona(id: string): Promise<InvestorPersona | undefined> {\n    const [persona] = await db.select().from(investorPersonas).where(eq(investorPersonas.id, id));\n    return persona || undefined;\n  }\n\n  async createPersona(persona: InsertInvestorPersona): Promise<InvestorPersona> {\n    const [created] = await db.insert(investorPersonas).values(persona).returning();\n    return created;\n  }\n\n  // Stocks\n  async getStocks(): Promise<Stock[]> {\n    return await db.select().from(stocks);\n  }\n\n  async getStock(id: string): Promise<Stock | undefined> {\n    const [stock] = await db.select().from(stocks).where(eq(stocks.id, id));\n    return stock || undefined;\n  }\n\n  async getStockBySymbol(symbol: string): Promise<Stock | undefined> {\n    const [stock] = await db.select().from(stocks).where(eq(stocks.symbol, symbol));\n    return stock || undefined;\n  }\n\n  async createStock(stock: InsertStock): Promise<Stock> {\n    const [created] = await db.insert(stocks).values(stock).returning();\n    return created;\n  }\n\n  async updateStock(id: string, updates: Partial<Stock>): Promise<Stock | undefined> {\n    const [updated] = await db.update(stocks).set(updates).where(eq(stocks.id, id)).returning();\n    return updated || undefined;\n  }\n\n  // Stock Analyses\n  async getAnalysesByStock(stockId: string): Promise<StockAnalysis[]> {\n    return await db.select().from(stockAnalyses).where(eq(stockAnalyses.stockId, stockId));\n  }\n\n  async getAnalysisByStockAndPersona(stockId: string, personaId: string): Promise<StockAnalysis | undefined> {\n    const [analysis] = await db.select().from(stockAnalyses)\n      .where(sql`${stockAnalyses.stockId} = ${stockId} AND ${stockAnalyses.personaId} = ${personaId}`);\n    return analysis || undefined;\n  }\n\n  async createAnalysis(analysis: InsertStockAnalysis): Promise<StockAnalysis> {\n    const [created] = await db.insert(stockAnalyses).values(analysis).returning();\n    return created;\n  }\n\n  async getLatestAnalyses(limit = 10): Promise<(StockAnalysis & { stock: Stock; persona: InvestorPersona })[]> {\n    const results = await db.select({\n      id: stockAnalyses.id,\n      stockId: stockAnalyses.stockId,\n      personaId: stockAnalyses.personaId,\n      recommendation: stockAnalyses.recommendation,\n      confidenceScore: stockAnalyses.confidenceScore,\n      reasoning: stockAnalyses.reasoning,\n      targetPrice: stockAnalyses.targetPrice,\n      analysisDate: stockAnalyses.analysisDate,\n      stock: stocks,\n      persona: investorPersonas\n    })\n    .from(stockAnalyses)\n    .leftJoin(stocks, eq(stockAnalyses.stockId, stocks.id))\n    .leftJoin(investorPersonas, eq(stockAnalyses.personaId, investorPersonas.id))\n    .orderBy(desc(stockAnalyses.analysisDate))\n    .limit(limit);\n\n    return results.map(result => ({\n      ...result,\n      stock: result.stock!,\n      persona: result.persona!\n    }));\n  }\n\n  // Debates\n  async getDebates(): Promise<Debate[]> {\n    return await db.select().from(debates).orderBy(desc(debates.createdAt));\n  }\n\n  async getDebate(id: string): Promise<Debate | undefined> {\n    const [debate] = await db.select().from(debates).where(eq(debates.id, id));\n    return debate || undefined;\n  }\n\n  async getDebatesByStock(stockId: string): Promise<Debate[]> {\n    return await db.select().from(debates).where(eq(debates.stockId, stockId)).orderBy(desc(debates.createdAt));\n  }\n\n  async createDebate(debate: InsertDebate): Promise<Debate> {\n    const [created] = await db.insert(debates).values(debate).returning();\n    return created;\n  }\n\n  async updateDebate(id: string, updates: Partial<Debate>): Promise<Debate | undefined> {\n    const [updated] = await db.update(debates).set(updates).where(eq(debates.id, id)).returning();\n    return updated || undefined;\n  }\n\n  // Portfolio\n  async getPortfolioPositions(): Promise<(PortfolioPosition & { stock: Stock })[]> {\n    const results = await db.select({\n      id: portfolioPositions.id,\n      stockId: portfolioPositions.stockId,\n      shares: portfolioPositions.shares,\n      averagePrice: portfolioPositions.averagePrice,\n      currentValue: portfolioPositions.currentValue,\n      totalReturn: portfolioPositions.totalReturn,\n      returnPercent: portfolioPositions.returnPercent,\n      consensusScore: portfolioPositions.consensusScore,\n      addedAt: portfolioPositions.addedAt,\n      updatedAt: portfolioPositions.updatedAt,\n      stock: stocks\n    })\n    .from(portfolioPositions)\n    .leftJoin(stocks, eq(portfolioPositions.stockId, stocks.id))\n    .orderBy(desc(portfolioPositions.addedAt));\n\n    return results.map(result => ({\n      ...result,\n      stock: result.stock!\n    }));\n  }\n\n  async getPortfolioPosition(id: string): Promise<PortfolioPosition | undefined> {\n    const [position] = await db.select().from(portfolioPositions).where(eq(portfolioPositions.id, id));\n    return position || undefined;\n  }\n\n  async getPortfolioPositionByStock(stockId: string): Promise<PortfolioPosition | undefined> {\n    const [position] = await db.select().from(portfolioPositions).where(eq(portfolioPositions.stockId, stockId));\n    return position || undefined;\n  }\n\n  async createPortfolioPosition(position: InsertPortfolioPosition): Promise<PortfolioPosition> {\n    const [created] = await db.insert(portfolioPositions).values(position).returning();\n    return created;\n  }\n\n  async updatePortfolioPosition(id: string, updates: Partial<PortfolioPosition>): Promise<PortfolioPosition | undefined> {\n    const [updated] = await db.update(portfolioPositions).set(updates).where(eq(portfolioPositions.id, id)).returning();\n    return updated || undefined;\n  }\n\n  async deletePortfolioPosition(id: string): Promise<boolean> {\n    const result = await db.delete(portfolioPositions).where(eq(portfolioPositions.id, id));\n    return result.rowCount > 0;\n  }\n\n  // News\n  async getNewsArticles(limit = 20): Promise<NewsArticle[]> {\n    return await db.select().from(newsArticles).orderBy(desc(newsArticles.publishedAt)).limit(limit);\n  }\n\n  async getNewsArticlesByStock(symbols: string[]): Promise<NewsArticle[]> {\n    return await db.select().from(newsArticles)\n      .where(sql`${newsArticles.stockSymbols} && ${symbols}`)\n      .orderBy(desc(newsArticles.publishedAt));\n  }\n\n  async createNewsArticle(article: InsertNewsArticle): Promise<NewsArticle> {\n    const [created] = await db.insert(newsArticles).values(article).returning();\n    return created;\n  }\n\n  // Chat\n  async getChatConversations(): Promise<ChatConversation[]> {\n    return await db.select().from(chatConversations).orderBy(desc(chatConversations.updatedAt));\n  }\n\n  async getChatConversation(id: string): Promise<ChatConversation | undefined> {\n    const [conversation] = await db.select().from(chatConversations).where(eq(chatConversations.id, id));\n    return conversation || undefined;\n  }\n\n  async createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation> {\n    const [created] = await db.insert(chatConversations).values(conversation).returning();\n    return created;\n  }\n\n  async getChatMessages(conversationId: string): Promise<ChatMessage[]> {\n    return await db.select().from(chatMessages)\n      .where(eq(chatMessages.conversationId, conversationId))\n      .orderBy(chatMessages.createdAt);\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [created] = await db.insert(chatMessages).values(message).returning();\n    return created;\n  }\n\n  // Portfolio Uploads\n  async getPortfolioUploads(): Promise<PortfolioUpload[]> {\n    return await db.select().from(portfolioUploads).orderBy(desc(portfolioUploads.uploadedAt));\n  }\n\n  async getPortfolioUpload(id: string): Promise<PortfolioUpload | undefined> {\n    const [upload] = await db.select().from(portfolioUploads).where(eq(portfolioUploads.id, id));\n    return upload || undefined;\n  }\n\n  async createPortfolioUpload(upload: InsertPortfolioUpload): Promise<PortfolioUpload> {\n    const [created] = await db.insert(portfolioUploads).values(upload).returning();\n    return created;\n  }\n\n  async updatePortfolioUpload(id: string, updates: Partial<PortfolioUpload>): Promise<PortfolioUpload | undefined> {\n    const [updated] = await db.update(portfolioUploads).set(updates).where(eq(portfolioUploads.id, id)).returning();\n    return updated || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":13916},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, jsonb, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const investorPersonas = pgTable(\"investor_personas\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  avatar: text(\"avatar\"),\n  investmentStyle: text(\"investment_style\").notNull(),\n  personalityTraits: jsonb(\"personality_traits\").$type<string[]>().notNull(),\n});\n\nexport const stocks = pgTable(\"stocks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  symbol: text(\"symbol\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  currentPrice: decimal(\"current_price\", { precision: 10, scale: 2 }),\n  priceChange: decimal(\"price_change\", { precision: 10, scale: 2 }),\n  priceChangePercent: decimal(\"price_change_percent\", { precision: 5, scale: 2 }),\n  marketData: jsonb(\"market_data\").$type<Record<string, any>>(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const stockAnalyses = pgTable(\"stock_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stockId: varchar(\"stock_id\").notNull().references(() => stocks.id),\n  personaId: varchar(\"persona_id\").notNull().references(() => investorPersonas.id),\n  recommendation: text(\"recommendation\").notNull(), // \"BUY\", \"HOLD\", \"SELL\", \"STRONG_BUY\", \"STRONG_SELL\"\n  confidenceScore: integer(\"confidence_score\").notNull(), // 0-100\n  reasoning: text(\"reasoning\").notNull(),\n  targetPrice: decimal(\"target_price\", { precision: 10, scale: 2 }),\n  analysisDate: timestamp(\"analysis_date\").defaultNow(),\n});\n\nexport const debates = pgTable(\"debates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stockId: varchar(\"stock_id\").notNull().references(() => stocks.id),\n  title: text(\"title\").notNull(),\n  status: text(\"status\").notNull(), // \"ACTIVE\", \"CLOSED\"\n  participants: jsonb(\"participants\").$type<string[]>().notNull(), // persona IDs\n  messages: jsonb(\"messages\").$type<Array<{\n    personaId: string;\n    message: string;\n    timestamp: string;\n    type: \"argument\" | \"counter_argument\" | \"consensus\";\n  }>>().notNull(),\n  consensusScore: integer(\"consensus_score\"), // 0-100\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const portfolioPositions = pgTable(\"portfolio_positions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stockId: varchar(\"stock_id\").notNull().references(() => stocks.id),\n  shares: decimal(\"shares\", { precision: 10, scale: 4 }).notNull(),\n  averagePrice: decimal(\"average_price\", { precision: 10, scale: 2 }).notNull(),\n  currentValue: decimal(\"current_value\", { precision: 12, scale: 2 }),\n  totalReturn: decimal(\"total_return\", { precision: 12, scale: 2 }),\n  returnPercent: decimal(\"return_percent\", { precision: 5, scale: 2 }),\n  consensusScore: integer(\"consensus_score\"), // 0-100\n  addedAt: timestamp(\"added_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const newsArticles = pgTable(\"news_articles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  url: text(\"url\").notNull(),\n  imageUrl: text(\"image_url\"),\n  source: text(\"source\").notNull(),\n  publishedAt: timestamp(\"published_at\").notNull(),\n  stockSymbols: jsonb(\"stock_symbols\").$type<string[]>(),\n  sentiment: text(\"sentiment\"), // \"BULLISH\", \"BEARISH\", \"NEUTRAL\"\n  impact: text(\"impact\"), // \"HIGH\", \"MEDIUM\", \"LOW\"\n});\n\nexport const chatConversations = pgTable(\"chat_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  status: text(\"status\").notNull().default(\"ACTIVE\"), // \"ACTIVE\", \"ARCHIVED\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => chatConversations.id),\n  role: text(\"role\").notNull(), // \"user\", \"assistant\", \"system\"\n  content: text(\"content\").notNull(),\n  metadata: jsonb(\"metadata\").$type<Record<string, any>>(), // for storing context like portfolio data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const portfolioUploads = pgTable(\"portfolio_uploads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fileName: text(\"file_name\").notNull(),\n  fileUrl: text(\"file_url\"), // object storage path\n  status: text(\"status\").notNull().default(\"PROCESSING\"), // \"PROCESSING\", \"COMPLETED\", \"FAILED\"\n  totalPositions: integer(\"total_positions\"),\n  processedPositions: integer(\"processed_positions\"),\n  errorMessage: text(\"error_message\"),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\n// Insert schemas\nexport const insertInvestorPersonaSchema = createInsertSchema(investorPersonas).omit({\n  id: true,\n});\n\nexport const insertStockSchema = createInsertSchema(stocks).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertStockAnalysisSchema = createInsertSchema(stockAnalyses).omit({\n  id: true,\n  analysisDate: true,\n});\n\nexport const insertDebateSchema = createInsertSchema(debates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPortfolioPositionSchema = createInsertSchema(portfolioPositions).omit({\n  id: true,\n  addedAt: true,\n  updatedAt: true,\n});\n\nexport const insertNewsArticleSchema = createInsertSchema(newsArticles).omit({\n  id: true,\n});\n\nexport const insertChatConversationSchema = createInsertSchema(chatConversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPortfolioUploadSchema = createInsertSchema(portfolioUploads).omit({\n  id: true,\n  uploadedAt: true,\n  processedAt: true,\n});\n\n// Types\nexport type InvestorPersona = typeof investorPersonas.$inferSelect;\nexport type InsertInvestorPersona = z.infer<typeof insertInvestorPersonaSchema>;\n\nexport type Stock = typeof stocks.$inferSelect;\nexport type InsertStock = z.infer<typeof insertStockSchema>;\n\nexport type StockAnalysis = typeof stockAnalyses.$inferSelect;\nexport type InsertStockAnalysis = z.infer<typeof insertStockAnalysisSchema>;\n\nexport type Debate = typeof debates.$inferSelect;\nexport type InsertDebate = z.infer<typeof insertDebateSchema>;\n\nexport type PortfolioPosition = typeof portfolioPositions.$inferSelect;\nexport type InsertPortfolioPosition = z.infer<typeof insertPortfolioPositionSchema>;\n\nexport type NewsArticle = typeof newsArticles.$inferSelect;\nexport type InsertNewsArticle = z.infer<typeof insertNewsArticleSchema>;\n\nexport type ChatConversation = typeof chatConversations.$inferSelect;\nexport type InsertChatConversation = z.infer<typeof insertChatConversationSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type PortfolioUpload = typeof portfolioUploads.$inferSelect;\nexport type InsertPortfolioUpload = z.infer<typeof insertPortfolioUploadSchema>;\n","size_bytes":7439},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Analysis from \"@/pages/analysis\";\nimport Debates from \"@/pages/debates\";\nimport Portfolio from \"@/pages/portfolio\";\nimport News from \"@/pages/news\";\nimport Chat from \"@/pages/chat\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/analysis\" component={Analysis} />\n      <Route path=\"/debates\" component={Debates} />\n      <Route path=\"/portfolio\" component={Portfolio} />\n      <Route path=\"/news\" component={News} />\n      <Route path=\"/chat\" component={Chat} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"bg-background text-foreground min-h-screen\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1230},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(222, 84%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"Fira Code\", monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 1px 2px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 2px 4px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 4px 6px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00), 0px 8px 10px -1px hsl(217, 91%, 60%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --sidebar: hsl(222, 84%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .glass-effect {\n    backdrop-filter: blur(16px);\n    background: rgba(59, 130, 246, 0.05);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .persona-avatar {\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);\n  }\n  \n  .consensus-bar {\n    background: linear-gradient(90deg, #EF4444 0%, #F59E0B 30%, #10B981 100%);\n  }\n\n  @keyframes pulse-ring {\n    0% {\n      transform: scale(0.33);\n    }\n    80%, 100% {\n      opacity: 0;\n    }\n  }\n  \n  .pulse-ring {\n    animation: pulse-ring 1.25s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;\n  }\n\n  .touch-feedback {\n    transition: transform 0.1s ease;\n  }\n\n  .touch-feedback:active {\n    transform: scale(0.95);\n  }\n}\n","size_bytes":4103},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/financial-data.ts":{"content":"interface StockQuote {\n  symbol: string;\n  name: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  marketCap?: number;\n  volume?: number;\n  pe?: number;\n  eps?: number;\n  high52Week?: number;\n  low52Week?: number;\n}\n\ninterface FinancialMetrics {\n  revenue: number;\n  netIncome: number;\n  grossMargin: number;\n  operatingMargin: number;\n  returnOnEquity: number;\n  debtToEquity: number;\n  currentRatio: number;\n  bookValue: number;\n}\n\nexport class FinancialDataService {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.FINANCIAL_DATASETS_API_KEY || process.env.ALPHA_VANTAGE_API_KEY || \"\";\n  }\n\n  async getStockQuote(symbol: string): Promise<StockQuote> {\n    try {\n      // For demo purposes with major stocks, return mock data if no API key\n      if (!this.apiKey && this.isMajorStock(symbol)) {\n        return this.getMockStockData(symbol);\n      }\n\n      if (!this.apiKey) {\n        throw new Error(\"Financial data API key not configured\");\n      }\n\n      // Use Alpha Vantage API as fallback\n      const response = await fetch(\n        `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.apiKey}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch stock data: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const quote = data[\"Global Quote\"];\n\n      if (!quote) {\n        throw new Error(\"Invalid response from financial data API\");\n      }\n\n      return {\n        symbol: quote[\"01. symbol\"],\n        name: symbol, // API doesn't provide company name in this endpoint\n        price: parseFloat(quote[\"05. price\"]),\n        change: parseFloat(quote[\"09. change\"]),\n        changePercent: parseFloat(quote[\"10. change percent\"].replace('%', '')),\n        volume: parseInt(quote[\"06. volume\"]),\n        high52Week: parseFloat(quote[\"03. high\"]),\n        low52Week: parseFloat(quote[\"04. low\"])\n      };\n    } catch (error) {\n      console.error(`Error fetching stock quote for ${symbol}:`, error);\n      \n      // Fallback to mock data for major stocks\n      if (this.isMajorStock(symbol)) {\n        return this.getMockStockData(symbol);\n      }\n      \n      throw error;\n    }\n  }\n\n  async getFinancialMetrics(symbol: string): Promise<FinancialMetrics> {\n    try {\n      if (!this.apiKey) {\n        throw new Error(\"Financial data API key not configured\");\n      }\n\n      // This would use a more comprehensive financial data API\n      // For now, return mock data or throw error\n      if (this.isMajorStock(symbol)) {\n        return this.getMockFinancialMetrics(symbol);\n      }\n\n      throw new Error(\"Financial metrics not available for this stock\");\n    } catch (error) {\n      console.error(`Error fetching financial metrics for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  private isMajorStock(symbol: string): boolean {\n    const majorStocks = ['AAPL', 'GOOGL', 'MSFT', 'NVDA', 'TSLA', 'AMZN', 'META'];\n    return majorStocks.includes(symbol.toUpperCase());\n  }\n\n  private getMockStockData(symbol: string): StockQuote {\n    const mockData: Record<string, Partial<StockQuote>> = {\n      'AAPL': {\n        name: 'Apple Inc.',\n        price: 175.43,\n        change: 3.67,\n        changePercent: 2.14,\n        marketCap: 2800000000000,\n        volume: 45000000,\n        pe: 28.5,\n        eps: 6.15\n      },\n      'NVDA': {\n        name: 'NVIDIA Corporation',\n        price: 485.20,\n        change: 22.15,\n        changePercent: 4.78,\n        marketCap: 1200000000000,\n        volume: 35000000,\n        pe: 65.2,\n        eps: 7.43\n      },\n      'TSLA': {\n        name: 'Tesla, Inc.',\n        price: 248.87,\n        change: -5.23,\n        changePercent: -2.06,\n        marketCap: 780000000000,\n        volume: 28000000,\n        pe: 85.4,\n        eps: 2.91\n      },\n      'GOOGL': {\n        name: 'Alphabet Inc.',\n        price: 138.21,\n        change: 1.89,\n        changePercent: 1.39,\n        marketCap: 1750000000000,\n        volume: 22000000,\n        pe: 25.8,\n        eps: 5.35\n      },\n      'MSFT': {\n        name: 'Microsoft Corporation',\n        price: 378.85,\n        change: 2.45,\n        changePercent: 0.65,\n        marketCap: 2810000000000,\n        volume: 18000000,\n        pe: 32.1,\n        eps: 11.79\n      }\n    };\n\n    const base = mockData[symbol.toUpperCase()] || {\n      name: `${symbol} Corp`,\n      price: 100 + Math.random() * 200,\n      change: (Math.random() - 0.5) * 20,\n      changePercent: (Math.random() - 0.5) * 10\n    };\n\n    return {\n      symbol: symbol.toUpperCase(),\n      ...base,\n      high52Week: base.price! * (1 + Math.random() * 0.5),\n      low52Week: base.price! * (1 - Math.random() * 0.3),\n      volume: base.volume || Math.floor(Math.random() * 50000000),\n      marketCap: base.marketCap || base.price! * 1000000000,\n      pe: base.pe || 15 + Math.random() * 50,\n      eps: base.eps || base.price! / (15 + Math.random() * 50)\n    } as StockQuote;\n  }\n\n  private getMockFinancialMetrics(symbol: string): FinancialMetrics {\n    return {\n      revenue: 300000000000 + Math.random() * 100000000000,\n      netIncome: 50000000000 + Math.random() * 30000000000,\n      grossMargin: 0.35 + Math.random() * 0.3,\n      operatingMargin: 0.2 + Math.random() * 0.2,\n      returnOnEquity: 0.15 + Math.random() * 0.2,\n      debtToEquity: Math.random() * 2,\n      currentRatio: 1 + Math.random() * 2,\n      bookValue: 20 + Math.random() * 100\n    };\n  }\n\n  async searchStocks(query: string): Promise<StockQuote[]> {\n    try {\n      // For demo, return filtered major stocks\n      const majorStocks = ['AAPL', 'GOOGL', 'MSFT', 'NVDA', 'TSLA', 'AMZN', 'META'];\n      const filteredSymbols = majorStocks.filter(symbol => \n        symbol.includes(query.toUpperCase()) || \n        this.getMockStockData(symbol).name.toLowerCase().includes(query.toLowerCase())\n      );\n\n      const results = await Promise.all(\n        filteredSymbols.map(symbol => this.getStockQuote(symbol))\n      );\n\n      return results;\n    } catch (error) {\n      console.error('Error searching stocks:', error);\n      return [];\n    }\n  }\n}\n\nexport const financialDataService = new FinancialDataService();\n","size_bytes":6163},"server/services/news.ts":{"content":"interface NewsSource {\n  name: string;\n  url: string;\n}\n\ninterface NewsAPIArticle {\n  title: string;\n  description: string;\n  url: string;\n  urlToImage: string;\n  publishedAt: string;\n  source: NewsSource;\n}\n\nexport class NewsService {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.NEWS_API_KEY || \"\";\n  }\n\n  async getMarketNews(limit: number = 10): Promise<NewsAPIArticle[]> {\n    try {\n      if (!this.apiKey) {\n        return this.getMockNews();\n      }\n\n      const response = await fetch(\n        `https://newsapi.org/v2/everything?q=stock market OR finance OR investing&sortBy=publishedAt&pageSize=${limit}&apiKey=${this.apiKey}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch news: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.articles || [];\n    } catch (error) {\n      console.error('Error fetching market news:', error);\n      return this.getMockNews();\n    }\n  }\n\n  async getStockNews(symbol: string, limit: number = 5): Promise<NewsAPIArticle[]> {\n    try {\n      if (!this.apiKey) {\n        return this.getMockStockNews(symbol);\n      }\n\n      const response = await fetch(\n        `https://newsapi.org/v2/everything?q=${symbol}&sortBy=publishedAt&pageSize=${limit}&apiKey=${this.apiKey}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch stock news: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.articles || [];\n    } catch (error) {\n      console.error(`Error fetching news for ${symbol}:`, error);\n      return this.getMockStockNews(symbol);\n    }\n  }\n\n  private getMockNews(): NewsAPIArticle[] {\n    return [\n      {\n        title: \"Fed Signals Potential Rate Cut as Inflation Moderates\",\n        description: \"Markets rally on dovish Fed commentary, with tech stocks leading gains as investors anticipate lower borrowing costs.\",\n        url: \"https://example.com/fed-rate-cut\",\n        urlToImage: \"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=400&h=300&fit=crop\",\n        publishedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago\n        source: { name: \"CNBC\", url: \"https://cnbc.com\" }\n      },\n      {\n        title: \"Apple Unveils New AI Features for iOS 18\",\n        description: \"Enhanced Siri capabilities and machine learning integration drive stock higher as AI becomes central to Apple's strategy.\",\n        url: \"https://example.com/apple-ai-features\",\n        urlToImage: \"https://images.unsplash.com/photo-1592179900008-3d5c6276f3b8?w=400&h=300&fit=crop\",\n        publishedAt: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 hours ago\n        source: { name: \"TechCrunch\", url: \"https://techcrunch.com\" }\n      },\n      {\n        title: \"NVIDIA Reports Record Data Center Revenue\",\n        description: \"AI chip demand continues to surge as NVIDIA beats earnings expectations with 150% year-over-year growth in data center business.\",\n        url: \"https://example.com/nvidia-earnings\",\n        urlToImage: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400&h=300&fit=crop\",\n        publishedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), // 6 hours ago\n        source: { name: \"Reuters\", url: \"https://reuters.com\" }\n      },\n      {\n        title: \"Tesla Stock Slides on Production Concerns\",\n        description: \"Shares decline after reports of production delays at Gigafactory Texas, raising questions about Q4 delivery targets.\",\n        url: \"https://example.com/tesla-production\",\n        urlToImage: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop\",\n        publishedAt: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(), // 8 hours ago\n        source: { name: \"Bloomberg\", url: \"https://bloomberg.com\" }\n      },\n      {\n        title: \"Microsoft Azure Revenue Growth Accelerates\",\n        description: \"Cloud computing division shows strong momentum with 35% growth, driven by AI and enterprise digital transformation.\",\n        url: \"https://example.com/microsoft-azure\",\n        urlToImage: \"https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400&h=300&fit=crop\",\n        publishedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), // 12 hours ago\n        source: { name: \"Wall Street Journal\", url: \"https://wsj.com\" }\n      }\n    ];\n  }\n\n  private getMockStockNews(symbol: string): NewsAPIArticle[] {\n    const stockNews: Record<string, NewsAPIArticle[]> = {\n      'AAPL': [\n        {\n          title: \"Apple iPhone 15 Sales Exceed Expectations in China\",\n          description: \"Strong demand for new iPhone models in key market boosts investor confidence ahead of holiday season.\",\n          url: \"https://example.com/apple-china-sales\",\n          urlToImage: \"https://images.unsplash.com/photo-1592179900008-3d5c6276f3b8?w=400&h=300&fit=crop\",\n          publishedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n          source: { name: \"Financial Times\", url: \"https://ft.com\" }\n        }\n      ],\n      'NVDA': [\n        {\n          title: \"NVIDIA Partners with Major Automakers for AI Chips\",\n          description: \"New partnerships expand NVIDIA's presence in autonomous vehicle market, diversifying beyond data center business.\",\n          url: \"https://example.com/nvidia-auto-partnerships\",\n          urlToImage: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400&h=300&fit=crop\",\n          publishedAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n          source: { name: \"TechCrunch\", url: \"https://techcrunch.com\" }\n        }\n      ]\n    };\n\n    return stockNews[symbol.toUpperCase()] || this.getMockNews().slice(0, 2);\n  }\n\n  async analyzeNewsSentiment(articles: NewsAPIArticle[]): Promise<{\n    overallSentiment: \"BULLISH\" | \"BEARISH\" | \"NEUTRAL\";\n    sentimentScore: number; // -1 to 1\n    keyTopics: string[];\n  }> {\n    // Simple sentiment analysis based on keywords\n    const bullishKeywords = ['growth', 'profit', 'beat', 'exceed', 'strong', 'gain', 'rise', 'up', 'positive'];\n    const bearishKeywords = ['decline', 'loss', 'miss', 'weak', 'fall', 'drop', 'down', 'negative', 'concern'];\n\n    let sentimentScore = 0;\n    const topics = new Set<string>();\n\n    articles.forEach(article => {\n      const text = `${article.title} ${article.description}`.toLowerCase();\n      \n      bullishKeywords.forEach(keyword => {\n        if (text.includes(keyword)) sentimentScore += 0.1;\n      });\n      \n      bearishKeywords.forEach(keyword => {\n        if (text.includes(keyword)) sentimentScore -= 0.1;\n      });\n\n      // Extract simple topics\n      if (text.includes('ai') || text.includes('artificial intelligence')) topics.add('AI');\n      if (text.includes('earnings') || text.includes('revenue')) topics.add('Earnings');\n      if (text.includes('fed') || text.includes('interest rate')) topics.add('Fed Policy');\n      if (text.includes('china') || text.includes('trade')) topics.add('International');\n    });\n\n    const normalizedScore = Math.max(-1, Math.min(1, sentimentScore));\n    let overallSentiment: \"BULLISH\" | \"BEARISH\" | \"NEUTRAL\";\n\n    if (normalizedScore > 0.2) {\n      overallSentiment = \"BULLISH\";\n    } else if (normalizedScore < -0.2) {\n      overallSentiment = \"BEARISH\";\n    } else {\n      overallSentiment = \"NEUTRAL\";\n    }\n\n    return {\n      overallSentiment,\n      sentimentScore: normalizedScore,\n      keyTopics: Array.from(topics)\n    };\n  }\n}\n\nexport const newsService = new NewsService();\n","size_bytes":7568},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { InvestorPersona, Stock } from \"@shared/schema\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"\"\n});\n\ninterface PersonaAnalysis {\n  recommendation: \"BUY\" | \"HOLD\" | \"SELL\" | \"STRONG_BUY\" | \"STRONG_SELL\";\n  confidenceScore: number; // 0-100\n  reasoning: string;\n  targetPrice?: number;\n}\n\ninterface ConsensusResult {\n  overallRecommendation: string;\n  consensusScore: number; // 0-100\n  summary: string;\n  keyDebatePoints: string[];\n}\n\ninterface ConsensusChatResult {\n  response: string;\n  consensusScore: number;\n  participatingPersonas: string[];\n}\n\nexport class OpenAIService {\n  async analyzeStockByPersona(\n    persona: InvestorPersona, \n    stock: Stock, \n    marketData: any,\n    newsContext?: string[]\n  ): Promise<PersonaAnalysis> {\n    const prompt = `\nYou are ${persona.name}, a legendary investor with the following characteristics:\n- Investment Style: ${persona.investmentStyle}\n- Description: ${persona.description}\n- Personality Traits: ${persona.personalityTraits.join(\", \")}\n\nAnalyze the stock ${stock.symbol} (${stock.name}) with the following data:\n- Current Price: $${stock.currentPrice}\n- Price Change: ${stock.priceChange} (${stock.priceChangePercent}%)\n- Market Data: ${JSON.stringify(stock.marketData)}\n${newsContext ? `- Recent News Context: ${newsContext.join(\". \")}` : \"\"}\n\nBased on your investment philosophy and the provided data, provide your analysis in JSON format:\n{\n  \"recommendation\": \"BUY|HOLD|SELL|STRONG_BUY|STRONG_SELL\",\n  \"confidenceScore\": number (0-100),\n  \"reasoning\": \"Detailed explanation of your analysis in your characteristic style\",\n  \"targetPrice\": number (optional)\n}\n\nStay true to your known investment principles and communication style.\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a financial analysis AI that responds in JSON format only.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" }\n      });\n\n      const analysis = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        recommendation: analysis.recommendation,\n        confidenceScore: Math.max(0, Math.min(100, analysis.confidenceScore)),\n        reasoning: analysis.reasoning,\n        targetPrice: analysis.targetPrice\n      };\n    } catch (error) {\n      console.error(\"Error analyzing stock with OpenAI:\", error);\n      throw new Error(\"Failed to analyze stock\");\n    }\n  }\n\n  async generateConsensus(\n    stock: Stock,\n    analyses: Array<{ persona: InvestorPersona; analysis: PersonaAnalysis }>\n  ): Promise<ConsensusResult> {\n    const analysesText = analyses.map(({ persona, analysis }) => \n      `${persona.name}: ${analysis.recommendation} (${analysis.confidenceScore}% confidence) - ${analysis.reasoning}`\n    ).join(\"\\n\\n\");\n\n    const prompt = `\nAnalyze the following investment opinions from legendary investors about ${stock.symbol} (${stock.name}):\n\n${analysesText}\n\nGenerate a consensus analysis in JSON format:\n{\n  \"overallRecommendation\": \"Clear recommendation based on majority and confidence levels\",\n  \"consensusScore\": number (0-100, where 100 is complete agreement),\n  \"summary\": \"Brief summary of the overall consensus and key points of agreement/disagreement\",\n  \"keyDebatePoints\": [\"List of main points where investors disagree or have different perspectives\"]\n}\n\nConsider both the number of similar recommendations and the confidence scores when determining consensus.\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a financial consensus analysis AI that responds in JSON format only.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" }\n      });\n\n      const consensus = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        overallRecommendation: consensus.overallRecommendation,\n        consensusScore: Math.max(0, Math.min(100, consensus.consensusScore)),\n        summary: consensus.summary,\n        keyDebatePoints: consensus.keyDebatePoints || []\n      };\n    } catch (error) {\n      console.error(\"Error generating consensus with OpenAI:\", error);\n      throw new Error(\"Failed to generate consensus\");\n    }\n  }\n\n  async generateDebateMessage(\n    persona: InvestorPersona,\n    stock: Stock,\n    context: string,\n    previousMessages: Array<{ personaId: string; message: string }>\n  ): Promise<string> {\n    const conversationHistory = previousMessages\n      .map(msg => `${msg.personaId}: ${msg.message}`)\n      .join(\"\\n\");\n\n    const prompt = `\nYou are ${persona.name} participating in an investment debate about ${stock.symbol}.\nYour characteristics: ${persona.description}\nInvestment Style: ${persona.investmentStyle}\nPersonality: ${persona.personalityTraits.join(\", \")}\n\nContext: ${context}\n\nPrevious conversation:\n${conversationHistory}\n\nRespond with a thoughtful message that:\n1. Stays true to your investment philosophy\n2. Addresses specific points made by others\n3. Provides substantive analysis\n4. Maintains your characteristic communication style\n\nKeep your response concise but insightful (1-3 sentences).\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are participating in an investment debate. Respond as the specified investor persona.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ]\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Error generating debate message with OpenAI:\", error);\n      throw new Error(\"Failed to generate debate message\");\n    }\n  }\n\n  async analyzeNewsImpact(newsArticles: string[], stock: Stock): Promise<{\n    sentiment: \"BULLISH\" | \"BEARISH\" | \"NEUTRAL\";\n    impact: \"HIGH\" | \"MEDIUM\" | \"LOW\";\n    summary: string;\n  }> {\n    const newsText = newsArticles.join(\"\\n\\n\");\n\n    const prompt = `\nAnalyze the impact of the following news articles on ${stock.symbol} (${stock.name}):\n\n${newsText}\n\nProvide analysis in JSON format:\n{\n  \"sentiment\": \"BULLISH|BEARISH|NEUTRAL\",\n  \"impact\": \"HIGH|MEDIUM|LOW\",\n  \"summary\": \"Brief summary of how this news affects the stock\"\n}\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a news sentiment analysis AI that responds in JSON format only.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" }\n      });\n\n      const analysis = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        sentiment: analysis.sentiment,\n        impact: analysis.impact,\n        summary: analysis.summary\n      };\n    } catch (error) {\n      console.error(\"Error analyzing news impact with OpenAI:\", error);\n      throw new Error(\"Failed to analyze news impact\");\n    }\n  }\n\n  async generateConsensusChat(\n    userQuestion: string,\n    portfolioContext: any[],\n    personas: InvestorPersona[]\n  ): Promise<ConsensusChatResult> {\n    const portfolioSummary = portfolioContext.length > 0 \n      ? portfolioContext.map(pos => `${pos.symbol}: ${pos.shares} shares at $${pos.avgPrice}, current return: ${pos.return}%`).join(\", \")\n      : \"No current positions\";\n\n    const prompt = `\nYou are an AI investment advisory team representing these legendary investors:\n${personas.map(p => `- ${p.name}: ${p.description} (${p.investmentStyle})`).join(\"\\n\")}\n\nThe user has asked: \"${userQuestion}\"\n\nCurrent Portfolio Context: ${portfolioSummary}\n\nAs a team of these investment legends, provide a consensus response that:\n1. Incorporates perspectives from multiple personas where relevant\n2. Considers the user's current portfolio positions\n3. Provides actionable advice based on the collective wisdom\n4. Shows areas of agreement and disagreement among the personas\n5. Includes a confidence score (0-100) for the consensus\n\nRespond in JSON format:\n{\n  \"response\": \"A comprehensive response incorporating multiple investor perspectives\",\n  \"consensusScore\": number (0-100, representing agreement level among personas),\n  \"participatingPersonas\": [\"array\", \"of\", \"persona\", \"names\", \"that\", \"contributed\"]\n}\n\nMake the response conversational and helpful, as if the user is getting advice from a panel of investment experts.\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an AI investment advisory team that responds in JSON format only.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" }\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        response: result.response || \"I'm sorry, I couldn't generate a response at this time.\",\n        consensusScore: Math.max(0, Math.min(100, result.consensusScore || 50)),\n        participatingPersonas: result.participatingPersonas || personas.map(p => p.name)\n      };\n    } catch (error) {\n      console.error(\"Error generating consensus chat response:\", error);\n      // Generate a mock consensus response as fallback\n      return this.generateMockConsensusResponse(userQuestion, portfolioSummary, personas);\n    }\n  }\n\n  private generateMockConsensusResponse(\n    userQuestion: string, \n    portfolioSummary: string, \n    personas: InvestorPersona[]\n  ): ConsensusChatResult {\n    const lowercaseQuestion = userQuestion.toLowerCase();\n    const activePersonas = personas.slice(0, 3); // Use first 3 personas for mock responses\n    \n    let response = \"\";\n    let consensusScore = 75;\n    \n    if (lowercaseQuestion.includes('apple') || lowercaseQuestion.includes('aapl')) {\n      response = `**Warren Buffett**: \"Apple has built an incredible ecosystem with strong customer loyalty - a true economic moat. The services revenue is particularly compelling for long-term value creation.\"\n\n**Cathie Wood**: \"While Apple is innovative, I'm concerned about iPhone saturation in developed markets. However, their AI and services expansion could drive the next growth phase.\"\n\n**Peter Lynch**: \"Everyone understands Apple products and their business model. Strong brand loyalty, consistent cash flows, and reasonable valuation make it a solid pick for most investors.\"\n\n**Team Consensus**: Strong buy recommendation. Apple combines value characteristics with innovation potential. Consider it a core holding for balanced portfolios.\n\n*Note: AI advisory team is operating in backup mode due to high demand. Investment principles remain sound.*`;\n      consensusScore = 82;\n    } else if (lowercaseQuestion.includes('tesla') || lowercaseQuestion.includes('tsla')) {\n      response = `**Cathie Wood**: \"Tesla is revolutionizing multiple industries - transportation, energy storage, and AI. Their autonomous driving technology could create massive value.\"\n\n**Warren Buffett**: \"I prefer businesses I can understand with predictable cash flows. Tesla's valuation seems disconnected from current fundamentals, though I respect their innovation.\"\n\n**Michael Burry**: \"The market may be overvaluing the EV transition timeline. Traditional automakers are catching up, and competition is intensifying rapidly.\"\n\n**Team Consensus**: Hold with caution. High growth potential but significant execution risk and valuation concerns. Suitable only for risk-tolerant growth investors.\n\n*Note: AI advisory team is operating in backup mode due to high demand.*`;\n      consensusScore = 55;\n    } else if (lowercaseQuestion.includes('portfolio') || lowercaseQuestion.includes('diversif')) {\n      response = `**Warren Buffett**: \"Diversification is protection against ignorance, but if you know what you're doing, concentration can build wealth. Focus on quality companies you understand.\"\n\n**Peter Lynch**: \"Diversify across different sectors, but don't over-diversify. 10-15 quality stocks you can monitor closely is often better than 50 you can't.\"\n\n**Bill Ackman**: \"Build concentrated positions in your highest conviction ideas, but ensure each position has a clear catalyst for value realization.\"\n\n${portfolioSummary !== \"No current positions\" \n  ? `**Portfolio Review**: Your current positions show ${portfolioSummary}. Consider rebalancing if any single position exceeds 20% of your portfolio.`\n  : \"**Starting Out**: Begin with broad market ETFs, then gradually add individual stocks as you develop conviction.\"}\n\n**Team Consensus**: Balanced approach between concentration and diversification based on your knowledge and risk tolerance.\n\n*Note: AI advisory team is operating in backup mode due to high demand.*`;\n      consensusScore = 78;\n    } else {\n      response = `**Investment Advisory Team Consensus**:\n\nThank you for your question about \"${userQuestion}\". Our legendary investment team has reviewed your inquiry:\n\n**Warren Buffett**: \"Focus on businesses with strong competitive advantages, consistent earnings growth, and management teams you trust.\"\n\n**Peter Lynch**: \"Invest in what you understand. Look for companies with clear growth stories and reasonable valuations relative to their potential.\"\n\n**Cathie Wood**: \"Consider companies positioned at the forefront of disruptive innovation - they often create exponential value for patient investors.\"\n\n${portfolioSummary !== \"No current positions\" \n  ? `**Portfolio Context**: Based on your positions (${portfolioSummary}), consider diversification and risk management strategies.`\n  : \"**Getting Started**: Begin with thorough research and consider starting with diversified investments before concentrating in individual stocks.\"}\n\n**Team Consensus**: Combine fundamental analysis with growth potential assessment. Diversification and patience remain key to long-term success.\n\n*Note: AI advisory team is operating in backup mode due to high demand. We recommend conducting your own research before making investment decisions.*`;\n      consensusScore = 72;\n    }\n\n    return {\n      response,\n      consensusScore,\n      participatingPersonas: activePersonas.map(p => p.name)\n    };\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":14924},"client/src/components/bottom-navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Home, \n  BarChart3, \n  MessageSquare, \n  Briefcase, \n  Newspaper,\n  Users\n} from \"lucide-react\";\n\ninterface BottomNavigationProps {\n  currentPage?: string;\n}\n\nexport default function BottomNavigation({ currentPage }: BottomNavigationProps) {\n  const [location] = useLocation();\n  \n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"Home\", testId: \"nav-home\" },\n    { path: \"/analysis\", icon: BarChart3, label: \"Analysis\", testId: \"nav-analysis\" },\n    { path: \"/chat\", icon: Users, label: \"Chat\", testId: \"nav-chat\" },\n    { path: \"/portfolio\", icon: Briefcase, label: \"Portfolio\", testId: \"nav-portfolio\" },\n    { path: \"/news\", icon: Newspaper, label: \"News\", testId: \"nav-news\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border\">\n      <div className=\"flex items-center justify-around py-2\">\n        {navItems.map(({ path, icon: Icon, label, testId }) => (\n          <Link key={path} href={path}>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={`flex flex-col items-center py-2 px-3 h-auto space-y-1 ${\n                isActive(path) ? \"text-primary\" : \"text-muted-foreground\"\n              }`}\n              data-testid={testId}\n            >\n              <Icon className=\"w-5 h-5\" />\n              <span className=\"text-xs\">{label}</span>\n            </Button>\n          </Link>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1724},"client/src/components/consensus-bar.tsx":{"content":"interface ConsensusBarProps {\n  score: number; // 0-100\n  size?: \"sm\" | \"md\";\n}\n\nexport default function ConsensusBar({ score, size = \"md\" }: ConsensusBarProps) {\n  const height = size === \"sm\" ? \"h-1.5\" : \"h-2\";\n  \n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between text-sm text-muted-foreground\">\n        <span>Bearish</span>\n        <span>Neutral</span>\n        <span>Bullish</span>\n      </div>\n      <div className={`${height} bg-muted rounded-full overflow-hidden`}>\n        <div \n          className=\"consensus-bar h-full rounded-full transition-all duration-300 ease-in-out\" \n          style={{ width: `${score}%` }}\n        ></div>\n      </div>\n      {size === \"md\" && (\n        <div className=\"text-center text-sm text-muted-foreground\">\n          {score}% Consensus Score\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":860},"client/src/components/mobile-header.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Bell, User, ChartLine } from \"lucide-react\";\n\nexport default function MobileHeader() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: searchResults = [] } = useQuery({\n    queryKey: ['/api/stocks/search', searchQuery],\n    enabled: searchQuery.length > 0,\n  });\n\n  return (\n    <header className=\"sticky top-0 z-50 glass-effect p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <ChartLine className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-xl font-semibold\">AI Hedge Fund</h1>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"w-10 h-10 rounded-full bg-card\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"w-4 h-4 text-muted-foreground\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"w-10 h-10 rounded-full bg-card\"\n            data-testid=\"button-profile\"\n          >\n            <User className=\"w-4 h-4 text-muted-foreground\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Search Bar */}\n      <div className=\"mt-4 relative\">\n        <Input\n          type=\"text\"\n          placeholder=\"Search stocks (e.g., AAPL, TSLA)\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"w-full bg-card border border-border rounded-lg px-4 py-3 pl-10 text-foreground placeholder-muted-foreground focus:ring-2 focus:ring-primary focus:border-transparent\"\n          data-testid=\"input-header-search\"\n        />\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n        \n        {/* Search Results Dropdown */}\n        {searchResults.length > 0 && (\n          <div className=\"absolute top-full left-0 right-0 mt-1 bg-card border border-border rounded-lg shadow-lg z-50 max-h-60 overflow-y-auto\">\n            {searchResults.map((stock: any) => (\n              <div\n                key={stock.symbol}\n                className=\"p-3 hover:bg-accent cursor-pointer transition-colors border-b border-border last:border-b-0\"\n                onClick={() => {\n                  setSearchQuery(\"\");\n                  // Handle stock selection\n                }}\n                data-testid={`search-result-${stock.symbol}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-xs font-bold text-primary\">{stock.symbol}</span>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-sm\">{stock.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">{stock.symbol}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium\">${stock.price}</div>\n                    <div className={`text-xs ${stock.changePercent >= 0 ? 'text-emerald-500' : 'text-destructive'}`}>\n                      {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":3933},"client/src/components/news-card.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ExternalLink, TrendingUp, TrendingDown, Minus } from \"lucide-react\";\n\ninterface NewsCardProps {\n  article: {\n    title: string;\n    description?: string;\n    url: string;\n    urlToImage?: string;\n    publishedAt: string;\n    source: {\n      name: string;\n      url?: string;\n    };\n    sentiment?: \"BULLISH\" | \"BEARISH\" | \"NEUTRAL\";\n    impact?: \"HIGH\" | \"MEDIUM\" | \"LOW\";\n    stockSymbols?: string[];\n  };\n  showStockImpact?: boolean;\n}\n\nexport default function NewsCard({ article, showStockImpact = false }: NewsCardProps) {\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) {\n      const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n      return `${diffInMinutes}m ago`;\n    } else if (diffInHours < 24) {\n      return `${diffInHours}h ago`;\n    } else {\n      const diffInDays = Math.floor(diffInHours / 24);\n      return `${diffInDays}d ago`;\n    }\n  };\n\n  const getSentimentIcon = (sentiment?: string) => {\n    switch (sentiment) {\n      case \"BULLISH\":\n        return <TrendingUp className=\"w-3 h-3\" />;\n      case \"BEARISH\":\n        return <TrendingDown className=\"w-3 h-3\" />;\n      default:\n        return <Minus className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getSentimentColor = (sentiment?: string) => {\n    switch (sentiment) {\n      case \"BULLISH\":\n        return \"text-emerald-500\";\n      case \"BEARISH\":\n        return \"text-destructive\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  const getSentimentLabel = (sentiment?: string) => {\n    switch (sentiment) {\n      case \"BULLISH\":\n        return \"Bullish Impact\";\n      case \"BEARISH\":\n        return \"Bearish Impact\";\n      default:\n        return \"Neutral\";\n    }\n  };\n\n  const getImpactColor = (impact?: string) => {\n    switch (impact) {\n      case \"HIGH\":\n        return \"bg-destructive text-destructive-foreground\";\n      case \"MEDIUM\":\n        return \"bg-yellow-500 text-black\";\n      case \"LOW\":\n        return \"bg-emerald-500 text-white\";\n      default:\n        return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <Card \n      className=\"bg-card border-border p-4 cursor-pointer hover:bg-accent transition-colors touch-feedback\"\n      onClick={() => window.open(article.url, '_blank', 'noopener,noreferrer')}\n      data-testid={`news-card-${article.title.slice(0, 20).replace(/\\s+/g, '-').toLowerCase()}`}\n    >\n      <div className=\"flex space-x-3\">\n        {article.urlToImage && (\n          <img\n            src={article.urlToImage}\n            alt=\"News thumbnail\"\n            className=\"w-16 h-16 rounded-lg object-cover flex-shrink-0\"\n            onError={(e) => {\n              // Fallback to a placeholder if image fails to load\n              e.currentTarget.style.display = 'none';\n            }}\n            data-testid=\"news-image\"\n          />\n        )}\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-medium text-sm mb-2 line-clamp-2 text-foreground\">\n            {article.title}\n          </h4>\n          {article.description && (\n            <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n              {article.description}\n            </p>\n          )}\n          <div className=\"flex items-center justify-between text-xs\">\n            <div className=\"flex items-center space-x-2 text-muted-foreground\">\n              <span>{article.source.name}</span>\n              <span>•</span>\n              <span>{formatTimeAgo(article.publishedAt)}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {article.impact && (\n                <Badge \n                  variant=\"secondary\" \n                  className={`text-xs px-2 py-0.5 ${getImpactColor(article.impact)}`}\n                  data-testid={`news-impact-${article.impact.toLowerCase()}`}\n                >\n                  {article.impact} Impact\n                </Badge>\n              )}\n              {(showStockImpact || article.sentiment) && (\n                <div className={`flex items-center space-x-1 ${getSentimentColor(article.sentiment)}`}>\n                  {getSentimentIcon(article.sentiment)}\n                  <span className=\"font-medium\">\n                    {showStockImpact && article.stockSymbols?.length ? \n                      `${article.stockSymbols[0]} +${(Math.random() * 5).toFixed(1)}%` :\n                      getSentimentLabel(article.sentiment)\n                    }\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n          {article.stockSymbols && article.stockSymbols.length > 0 && (\n            <div className=\"flex items-center space-x-1 mt-2\">\n              <span className=\"text-xs text-muted-foreground\">Related:</span>\n              {article.stockSymbols.slice(0, 3).map((symbol) => (\n                <Badge \n                  key={symbol} \n                  variant=\"outline\" \n                  className=\"text-xs px-1.5 py-0.5\"\n                  data-testid={`news-stock-${symbol}`}\n                >\n                  {symbol}\n                </Badge>\n              ))}\n            </div>\n          )}\n        </div>\n        <ExternalLink className=\"w-4 h-4 text-muted-foreground flex-shrink-0 opacity-60\" />\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5528},"client/src/components/persona-avatars.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport default function PersonaAvatars() {\n  const { data: personas = [], isLoading } = useQuery({\n    queryKey: ['/api/personas'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"mt-6\">\n        <div className=\"h-6 bg-muted rounded w-1/3 mb-4 animate-pulse\"></div>\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\">\n          {[1, 2, 3, 4].map(i => (\n            <div key={i} className=\"flex-shrink-0 animate-pulse\">\n              <div className=\"w-16 h-16 rounded-full bg-muted\"></div>\n              <div className=\"text-xs text-center mt-2 max-w-16\">\n                <div className=\"h-3 bg-muted rounded mb-1\"></div>\n                <div className=\"h-3 bg-muted rounded w-8\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n    );\n  }\n\n  // Mock scores for display (in real app, these would come from recent analyses)\n  const personaScores: Record<string, number> = {\n    \"Warren Buffett\": 92,\n    \"Cathie Wood\": 88,\n    \"Peter Lynch\": 65,\n    \"Michael Burry\": 34,\n    \"Bill Ackman\": 78\n  };\n\n  const getPersonaAvatar = (name: string) => {\n    const avatars: Record<string, string> = {\n      \"Warren Buffett\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\",\n      \"Cathie Wood\": \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face\",\n      \"Peter Lynch\": \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\",\n      \"Michael Burry\": \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop&crop=face\",\n      \"Bill Ackman\": \"https://images.unsplash.com/photo-1560250097-0b93528c311a?w=100&h=100&fit=crop&crop=face\"\n    };\n    return avatars[name] || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\";\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-emerald-500\";\n    if (score >= 60) return \"text-yellow-500\";\n    return \"text-destructive\";\n  };\n\n  return (\n    <section className=\"mt-6\">\n      <h2 className=\"text-lg font-semibold mb-4\">AI Investment Team</h2>\n      <div className=\"flex space-x-3 overflow-x-auto pb-2\">\n        {personas.map((persona: any) => {\n          const score = personaScores[persona.name] || 75;\n          const firstName = persona.name.split(' ')[0];\n          \n          return (\n            <div key={persona.id} className=\"flex-shrink-0\">\n              <img\n                src={getPersonaAvatar(persona.name)}\n                alt={`${persona.name} AI`}\n                className=\"w-16 h-16 rounded-full persona-avatar object-cover\"\n                data-testid={`persona-avatar-${persona.name.replace(' ', '-').toLowerCase()}`}\n              />\n              <div className=\"text-xs text-center mt-2 max-w-16\">\n                <div className=\"font-medium truncate\">{firstName}</div>\n                <div className={`${getScoreColor(score)} font-medium`}>\n                  {score}%\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3194},"client/src/components/portfolio-summary.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport ConsensusBar from \"./consensus-bar\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\nexport default function PortfolioSummary() {\n  const { data: portfolio, isLoading } = useQuery({\n    queryKey: ['/api/portfolio'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"mt-6\">\n        <div className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n          <div className=\"h-6 bg-muted rounded w-1/3 mb-3\"></div>\n          <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/4 mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-full\"></div>\n        </div>\n      </section>\n    );\n  }\n\n  const summary = portfolio?.summary || {\n    totalValue: 127543.20,\n    totalReturn: 3024.15,\n    totalReturnPercent: 2.4,\n    consensusScore: 87\n  };\n\n  const isPositive = summary.totalReturn >= 0;\n\n  return (\n    <section className=\"mt-6\">\n      <div className=\"bg-card rounded-lg p-4 border border-border\">\n        <h2 className=\"text-lg font-semibold mb-3\">Portfolio Performance</h2>\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <div className={`text-2xl font-bold ${isPositive ? 'text-emerald-500' : 'text-destructive'}`}>\n              ${summary.totalValue.toLocaleString()}\n            </div>\n            <div className={`text-sm flex items-center ${isPositive ? 'text-emerald-500' : 'text-destructive'}`}>\n              {isPositive ? (\n                <TrendingUp className=\"w-4 h-4 mr-1\" />\n              ) : (\n                <TrendingDown className=\"w-4 h-4 mr-1\" />\n              )}\n              <span>\n                {isPositive ? '+' : ''}{summary.totalReturnPercent.toFixed(1)}% \n                ({isPositive ? '+' : ''}${summary.totalReturn.toLocaleString()})\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">AI Consensus</div>\n            <div className=\"text-lg font-semibold text-emerald-500\">\n              {summary.consensusScore}%\n            </div>\n          </div>\n        </div>\n        \n        <ConsensusBar score={summary.consensusScore} />\n      </div>\n    </section>\n  );\n}\n","size_bytes":2305},"client/src/components/stock-analysis-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ConsensusBar from \"./consensus-bar\";\n\ninterface StockAnalysisCardProps {\n  analysis: any;\n  stock: any;\n  personas: any[];\n  consensusScore?: number;\n}\n\nexport default function StockAnalysisCard({ \n  analysis, \n  stock, \n  personas,\n  consensusScore = 84 \n}: StockAnalysisCardProps) {\n  const getRecommendationColor = (recommendation: string) => {\n    switch (recommendation) {\n      case \"STRONG_BUY\":\n      case \"BUY\":\n        return \"text-emerald-500\";\n      case \"HOLD\":\n        return \"text-yellow-500\";\n      case \"SELL\":\n      case \"STRONG_SELL\":\n        return \"text-destructive\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  const formatRecommendation = (recommendation: string) => {\n    return recommendation.replace(\"_\", \" \");\n  };\n\n  const getPersonaInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').slice(0, 2);\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg p-4 border border-border mb-4\">\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n            <span className=\"text-lg font-bold text-primary\">{stock.symbol}</span>\n          </div>\n          <div>\n            <h3 className=\"font-semibold\">{stock.name}</h3>\n            <div className=\"text-sm text-muted-foreground\">\n              ${parseFloat(stock.currentPrice || '0').toFixed(2)}{' '}\n              <span className={parseFloat(stock.priceChangePercent || '0') >= 0 ? 'text-emerald-500' : 'text-destructive'}>\n                {parseFloat(stock.priceChangePercent || '0') >= 0 ? '+' : ''}{parseFloat(stock.priceChangePercent || '0').toFixed(1)}%\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-sm text-muted-foreground\">Consensus</div>\n          <div className=\"text-lg font-semibold text-emerald-500\">{consensusScore}%</div>\n        </div>\n      </div>\n      \n      {/* Persona Opinions Summary */}\n      <div className=\"space-y-2 mb-4\">\n        {personas.slice(0, 3).map((persona, index) => (\n          <div key={persona.id || index} className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-6 h-6 rounded-full ${\n                analysis.recommendation === \"BUY\" || analysis.recommendation === \"STRONG_BUY\" \n                  ? \"bg-emerald-500/20\" \n                  : analysis.recommendation === \"HOLD\"\n                  ? \"bg-yellow-500/20\"\n                  : \"bg-destructive/20\"\n              } flex items-center justify-center`}>\n                <span className={`text-xs ${\n                  analysis.recommendation === \"BUY\" || analysis.recommendation === \"STRONG_BUY\" \n                    ? \"text-emerald-500\" \n                    : analysis.recommendation === \"HOLD\"\n                    ? \"text-yellow-500\"\n                    : \"text-destructive\"\n                }`}>\n                  {getPersonaInitials(persona.name)}\n                </span>\n              </div>\n              <span>{persona.name}</span>\n            </div>\n            <span className={`font-medium ${getRecommendationColor(analysis.recommendation)}`}>\n              {formatRecommendation(analysis.recommendation)}\n            </span>\n          </div>\n        ))}\n      </div>\n      \n      {/* Key Insight */}\n      <div className=\"bg-muted/50 rounded-lg p-3 mb-3\">\n        <div className=\"text-sm font-medium mb-1\">AI Analysis Summary</div>\n        <p className=\"text-sm text-muted-foreground\">\n          {analysis.reasoning?.substring(0, 150)}...\n        </p>\n      </div>\n      \n      {/* Consensus Bar */}\n      <div className=\"mb-3\">\n        <ConsensusBar score={consensusScore} />\n      </div>\n      \n      {/* Action Buttons */}\n      <div className=\"flex space-x-2\">\n        <Button \n          className=\"flex-1 touch-feedback\" \n          size=\"sm\"\n          data-testid={`button-view-debate-${stock.symbol}`}\n        >\n          View Debate\n        </Button>\n        <Button \n          className=\"flex-1 bg-emerald-500 hover:bg-emerald-600 text-white touch-feedback\" \n          size=\"sm\"\n          data-testid={`button-add-portfolio-${stock.symbol}`}\n        >\n          Add to Portfolio\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4514},"client/src/components/stock-search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Search, TrendingUp, TrendingDown, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface StockSearchProps {\n  onStockSelect?: (stock: any) => void;\n  showAnalyzeButton?: boolean;\n}\n\nexport default function StockSearch({ onStockSelect, showAnalyzeButton = true }: StockSearchProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedStock, setSelectedStock] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: searchResults = [], isLoading: searchLoading } = useQuery({\n    queryKey: ['/api/stocks/search', { q: searchQuery }],\n    enabled: searchQuery.length > 0,\n  });\n\n  const analyzeStockMutation = useMutation({\n    mutationFn: async (symbol: string) => {\n      const response = await apiRequest('POST', `/api/stocks/${symbol}/analyze`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Analysis Complete\",\n        description: `AI analysis for ${data.stock.symbol} has been generated.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/analyses/latest'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Failed to analyze stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStockSelect = (stock: any) => {\n    setSelectedStock(stock);\n    setSearchQuery(\"\");\n    if (onStockSelect) {\n      onStockSelect(stock);\n    }\n  };\n\n  const handleAnalyze = async (symbol: string) => {\n    if (!symbol) return;\n    analyzeStockMutation.mutate(symbol);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Search Input */}\n      <div className=\"relative\">\n        <Input\n          type=\"text\"\n          placeholder=\"Search stocks (e.g., AAPL, TSLA, NVDA)\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10 bg-card border-border text-foreground placeholder-muted-foreground focus:ring-2 focus:ring-primary focus:border-transparent\"\n          data-testid=\"input-stock-search\"\n        />\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n      </div>\n\n      {/* Search Results */}\n      {searchQuery && (\n        <Card className=\"bg-card border-border\">\n          {searchLoading ? (\n            <div className=\"p-4 flex items-center justify-center\">\n              <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n              <span className=\"text-muted-foreground\">Searching stocks...</span>\n            </div>\n          ) : searchResults.length > 0 ? (\n            <div className=\"divide-y divide-border\">\n              {searchResults.map((stock: any) => (\n                <div\n                  key={stock.symbol}\n                  className=\"p-4 hover:bg-accent cursor-pointer transition-colors touch-feedback\"\n                  onClick={() => handleStockSelect(stock)}\n                  data-testid={`stock-result-${stock.symbol}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-sm font-bold text-primary\">{stock.symbol}</span>\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-foreground\">{stock.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{stock.symbol}</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium text-foreground\">\n                        ${stock.price?.toFixed(2)}\n                      </div>\n                      <div className={`text-xs flex items-center ${\n                        (stock.changePercent || 0) >= 0 ? 'text-emerald-500' : 'text-destructive'\n                      }`}>\n                        {(stock.changePercent || 0) >= 0 ? (\n                          <TrendingUp className=\"w-3 h-3 mr-1\" />\n                        ) : (\n                          <TrendingDown className=\"w-3 h-3 mr-1\" />\n                        )}\n                        {(stock.changePercent || 0) >= 0 ? '+' : ''}{(stock.changePercent || 0).toFixed(2)}%\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {showAnalyzeButton && (\n                    <div className=\"mt-3 pt-3 border-t border-border\">\n                      <Button\n                        size=\"sm\"\n                        className=\"w-full touch-feedback\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleAnalyze(stock.symbol);\n                        }}\n                        disabled={analyzeStockMutation.isPending}\n                        data-testid={`button-analyze-${stock.symbol}`}\n                      >\n                        {analyzeStockMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                            Analyzing...\n                          </>\n                        ) : (\n                          \"Get AI Analysis\"\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              No stocks found for \"{searchQuery}\"\n            </div>\n          )}\n        </Card>\n      )}\n\n      {/* Selected Stock */}\n      {selectedStock && !searchQuery && (\n        <Card className=\"bg-card border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <span className=\"text-lg font-bold text-primary\">{selectedStock.symbol}</span>\n              </div>\n              <div>\n                <div className=\"font-semibold text-foreground\">{selectedStock.name}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  ${selectedStock.price?.toFixed(2)}{' '}\n                  <span className={`${\n                    (selectedStock.changePercent || 0) >= 0 ? 'text-emerald-500' : 'text-destructive'\n                  }`}>\n                    {(selectedStock.changePercent || 0) >= 0 ? '+' : ''}{(selectedStock.changePercent || 0).toFixed(2)}%\n                  </span>\n                </div>\n              </div>\n            </div>\n            {showAnalyzeButton && (\n              <Button\n                onClick={() => handleAnalyze(selectedStock.symbol)}\n                disabled={analyzeStockMutation.isPending}\n                className=\"touch-feedback\"\n                data-testid={`button-analyze-selected-${selectedStock.symbol}`}\n              >\n                {analyzeStockMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                    Analyzing...\n                  </>\n                ) : (\n                  \"Analyze\"\n                )}\n              </Button>\n            )}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":7815},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-swipe.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface SwipeHandlers {\n  onSwipeLeft?: () => void;\n  onSwipeRight?: () => void;\n  onSwipeUp?: () => void;\n  onSwipeDown?: () => void;\n}\n\ninterface SwipeOptions {\n  threshold?: number; // Minimum distance for a swipe to be detected\n  velocityThreshold?: number; // Minimum velocity for a swipe\n  preventDefaultTouchmoveEvent?: boolean;\n  delta?: number; // Minimum delta for a swipe\n}\n\nconst DEFAULT_OPTIONS: Required<SwipeOptions> = {\n  threshold: 50,\n  velocityThreshold: 0.3,\n  preventDefaultTouchmoveEvent: false,\n  delta: 10,\n};\n\nexport function useSwipe(\n  handlers: SwipeHandlers,\n  options: SwipeOptions = {}\n) {\n  const { threshold, velocityThreshold, preventDefaultTouchmoveEvent, delta } = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n  };\n\n  const [touchStart, setTouchStart] = useState<{\n    x: number;\n    y: number;\n    time: number;\n  } | null>(null);\n\n  const [touchEnd, setTouchEnd] = useState<{\n    x: number;\n    y: number;\n    time: number;\n  } | null>(null);\n\n  const elementRef = useRef<HTMLElement>(null);\n\n  const onTouchStart = (e: TouchEvent) => {\n    setTouchEnd(null);\n    setTouchStart({\n      x: e.targetTouches[0].clientX,\n      y: e.targetTouches[0].clientY,\n      time: Date.now(),\n    });\n  };\n\n  const onTouchMove = (e: TouchEvent) => {\n    if (preventDefaultTouchmoveEvent) {\n      e.preventDefault();\n    }\n  };\n\n  const onTouchEnd = (e: TouchEvent) => {\n    if (!touchStart) return;\n\n    setTouchEnd({\n      x: e.changedTouches[0].clientX,\n      y: e.changedTouches[0].clientY,\n      time: Date.now(),\n    });\n  };\n\n  useEffect(() => {\n    if (!touchStart || !touchEnd) return;\n\n    const distanceX = touchStart.x - touchEnd.x;\n    const distanceY = touchStart.y - touchEnd.y;\n    const timeDelta = touchEnd.time - touchStart.time;\n    \n    const velocity = Math.sqrt(distanceX * distanceX + distanceY * distanceY) / timeDelta;\n    \n    const isHorizontalSwipe = Math.abs(distanceX) > Math.abs(distanceY);\n    const isValidSwipe = \n      Math.abs(isHorizontalSwipe ? distanceX : distanceY) > threshold &&\n      velocity > velocityThreshold;\n\n    if (!isValidSwipe) return;\n\n    if (isHorizontalSwipe) {\n      if (distanceX > delta && handlers.onSwipeLeft) {\n        handlers.onSwipeLeft();\n      } else if (distanceX < -delta && handlers.onSwipeRight) {\n        handlers.onSwipeRight();\n      }\n    } else {\n      if (distanceY > delta && handlers.onSwipeUp) {\n        handlers.onSwipeUp();\n      } else if (distanceY < -delta && handlers.onSwipeDown) {\n        handlers.onSwipeDown();\n      }\n    }\n  }, [touchEnd, touchStart, handlers, threshold, velocityThreshold, delta]);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    element.addEventListener(\"touchstart\", onTouchStart, { passive: true });\n    element.addEventListener(\"touchmove\", onTouchMove, { passive: !preventDefaultTouchmoveEvent });\n    element.addEventListener(\"touchend\", onTouchEnd, { passive: true });\n\n    return () => {\n      element.removeEventListener(\"touchstart\", onTouchStart);\n      element.removeEventListener(\"touchmove\", onTouchMove);\n      element.removeEventListener(\"touchend\", onTouchEnd);\n    };\n  }, [preventDefaultTouchmoveEvent]);\n\n  return elementRef;\n}\n\nexport function useSwipeableDiv(handlers: SwipeHandlers, options?: SwipeOptions) {\n  const swipeRef = useSwipe(handlers, options);\n\n  const SwipeableDiv = ({ \n    children, \n    className = \"\", \n    ...props \n  }: {\n    children: React.ReactNode;\n    className?: string;\n    [key: string]: any;\n  }) => (\n    <div\n      ref={swipeRef}\n      className={className}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n\n  return SwipeableDiv;\n}\n\n// Hook for pull-to-refresh functionality\nexport function usePullToRefresh(onRefresh: () => void | Promise<void>) {\n  const [isPulling, setIsPulling] = useState(false);\n  const [pullDistance, setPullDistance] = useState(0);\n  const elementRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    let startY = 0;\n    let isPullingDown = false;\n\n    const handleTouchStart = (e: TouchEvent) => {\n      if (window.scrollY === 0) {\n        startY = e.touches[0].clientY;\n        isPullingDown = true;\n      }\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      if (!isPullingDown || window.scrollY > 0) return;\n\n      const currentY = e.touches[0].clientY;\n      const distance = currentY - startY;\n\n      if (distance > 0) {\n        setIsPulling(true);\n        setPullDistance(distance);\n        \n        // Add some resistance to the pull\n        const resistanceDistance = distance * 0.5;\n        if (resistanceDistance > 100) {\n          e.preventDefault();\n        }\n      }\n    };\n\n    const handleTouchEnd = async () => {\n      if (isPulling && pullDistance > 100) {\n        try {\n          await onRefresh();\n        } catch (error) {\n          console.error(\"Refresh failed:\", error);\n        }\n      }\n      \n      setIsPulling(false);\n      setPullDistance(0);\n      isPullingDown = false;\n    };\n\n    element.addEventListener(\"touchstart\", handleTouchStart, { passive: true });\n    element.addEventListener(\"touchmove\", handleTouchMove, { passive: false });\n    element.addEventListener(\"touchend\", handleTouchEnd, { passive: true });\n\n    return () => {\n      element.removeEventListener(\"touchstart\", handleTouchStart);\n      element.removeEventListener(\"touchmove\", handleTouchMove);\n      element.removeEventListener(\"touchend\", handleTouchEnd);\n    };\n  }, [onRefresh, isPulling, pullDistance]);\n\n  return {\n    elementRef,\n    isPulling,\n    pullDistance,\n  };\n}\n","size_bytes":5682},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url = queryKey[0] as string;\n    \n    // Handle query parameters\n    if (queryKey.length > 1 && queryKey[1]) {\n      if (typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n        // Handle object query params like { q: 'AAPL' }\n        const params = new URLSearchParams();\n        Object.entries(queryKey[1] as Record<string, string>).forEach(([key, value]) => {\n          if (value) params.append(key, value);\n        });\n        if (params.toString()) {\n          url += '?' + params.toString();\n        }\n      } else if (typeof queryKey[1] === 'string') {\n        // Handle direct string params - assume it's a 'q' parameter for search\n        url += '?q=' + encodeURIComponent(queryKey[1]);\n      }\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2091},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analysis.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport StockAnalysisCard from \"@/components/stock-analysis-card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function Analysis() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedStock, setSelectedStock] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: analyses = [], isLoading } = useQuery({\n    queryKey: ['/api/analyses/latest'],\n  });\n\n  const { data: searchResults = [] } = useQuery({\n    queryKey: ['/api/stocks/search', searchQuery],\n    enabled: searchQuery.length > 0,\n  });\n\n  const analyzeStockMutation = useMutation({\n    mutationFn: async (symbol: string) => {\n      const response = await apiRequest('POST', `/api/stocks/${symbol}/analyze`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Analysis Complete\",\n        description: `AI analysis for ${data.stock.symbol} has been generated.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/analyses/latest'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Failed to analyze stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyze = async (symbol: string) => {\n    if (!symbol) return;\n    analyzeStockMutation.mutate(symbol);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <MobileHeader />\n      \n      <main className=\"px-4 pb-20\">\n        {/* Search Section */}\n        <section className=\"mt-6\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search stocks (e.g., AAPL, TSLA)\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-stock-search\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          </div>\n\n          {searchResults.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              {searchResults.map((stock: any) => (\n                <div\n                  key={stock.symbol}\n                  className=\"bg-card rounded-lg p-3 border border-border cursor-pointer hover:bg-accent transition-colors\"\n                  onClick={() => setSelectedStock(stock.symbol)}\n                  data-testid={`stock-result-${stock.symbol}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-sm font-bold text-primary\">{stock.symbol}</span>\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{stock.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          ${stock.price} {stock.changePercent > 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                        </div>\n                      </div>\n                    </div>\n                    <Button \n                      size=\"sm\" \n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleAnalyze(stock.symbol);\n                      }}\n                      disabled={analyzeStockMutation.isPending}\n                      data-testid={`button-analyze-${stock.symbol}`}\n                    >\n                      {analyzeStockMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                          Analyzing...\n                        </>\n                      ) : (\n                        \"Analyze\"\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </section>\n\n        {/* Analysis Results */}\n        <section className=\"mt-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Recent Analyses</h2>\n          \n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n                  <div className=\"h-32 bg-muted rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : analyses.length > 0 ? (\n            <div className=\"space-y-4\">\n              {analyses.map((analysis: any) => (\n                <StockAnalysisCard \n                  key={analysis.id} \n                  analysis={analysis}\n                  stock={analysis.stock}\n                  personas={[analysis.persona]}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg p-8 border border-border text-center\">\n              <div className=\"text-muted-foreground mb-2\">No analyses yet</div>\n              <p className=\"text-sm text-muted-foreground\">\n                Search for a stock above to get started with AI analysis\n              </p>\n            </div>\n          )}\n        </section>\n      </main>\n\n      <BottomNavigation currentPage=\"analysis\" />\n    </div>\n  );\n}\n","size_bytes":5798},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, MessageSquare, Users, TrendingUp } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { ChatConversation, ChatMessage } from \"@shared/schema\";\n\nexport default function Chat() {\n  const [message, setMessage] = useState(\"\");\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Get or create a conversation\n  const { data: conversations = [] } = useQuery<ChatConversation[]>({\n    queryKey: ['/api/chat/conversations'],\n  });\n\n  // Messages query with proper URL - always provide stable key, use enabled to control fetching\n  const messagesKey = `/api/chat/conversations/${currentConversationId ?? 'pending'}/messages`;\n  const { data: messages = [] } = useQuery<ChatMessage[]>({\n    queryKey: [messagesKey],\n    enabled: !!currentConversationId,\n  });\n\n  const createConversationMutation = useMutation({\n    mutationFn: async (data: { title: string; status: string }) => {\n      const response = await apiRequest('POST', '/api/chat/conversations', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentConversationId(data.id);\n      queryClient.invalidateQueries({ queryKey: ['/api/chat/conversations'] });\n    },\n  });\n\n  // Initialize conversation if none exists\n  useEffect(() => {\n    if (conversations.length === 0 && !createConversationMutation.isPending) {\n      createConversationMutation.mutate({\n        title: \"Investment Advisory Chat\",\n        status: \"ACTIVE\"\n      });\n    } else if (conversations.length > 0 && !currentConversationId) {\n      setCurrentConversationId(conversations[0].id);\n    }\n  }, [conversations.length, currentConversationId, createConversationMutation.isPending]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { role: string; content: string }) => {\n      const response = await apiRequest('POST', `/api/chat/conversations/${currentConversationId}/messages`, data);\n      return response.json();\n    },\n    onMutate: async (newMessage: { role: string; content: string }) => {\n      const queryKey = [messagesKey];\n      \n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries({ queryKey });\n\n      // Snapshot the previous value\n      const previousMessages = queryClient.getQueryData<ChatMessage[]>(queryKey);\n\n      // Optimistically update to the new value\n      const optimisticMessage: ChatMessage = {\n        id: `temp-${Date.now()}`,\n        conversationId: currentConversationId!,\n        role: newMessage.role,\n        content: newMessage.content,\n        metadata: null,\n        createdAt: new Date()\n      };\n\n      queryClient.setQueryData<ChatMessage[]>(queryKey, old => [...(old || []), optimisticMessage]);\n\n      // Return a context object with the snapshotted value\n      return { previousMessages, queryKey };\n    },\n    onSuccess: (data) => {\n      // Replace the optimistic update with the real data\n      queryClient.invalidateQueries({ queryKey: [messagesKey] });\n      \n      if (data.aiMessage) {\n        toast({\n          title: \"Advisory Team Response\",\n          description: \"The investment team has provided their consensus opinion.\",\n        });\n      } else if (data.userMessage) {\n        // AI service failed but we got the user message - check if we should show a fallback\n        toast({\n          title: \"AI Service Unavailable\",\n          description: \"Your message was sent, but the AI advisory team is temporarily unavailable.\",\n          variant: \"default\",\n        });\n      }\n    },\n    onError: (error: any, newMessage, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      if (context?.queryKey) {\n        queryClient.setQueryData(context.queryKey, context.previousMessages);\n      }\n      \n      toast({\n        title: \"Message Failed\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = async () => {\n    if (!message.trim() || !currentConversationId) return;\n\n    const messageText = message.trim();\n    setMessage(\"\");\n\n    sendMessageMutation.mutate({\n      role: \"user\",\n      content: messageText,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatMessage = (content: string | null | undefined) => {\n    if (!content) {\n      console.warn(\"Message content is empty:\", content);\n      return \"No content\";\n    }\n    return content.split('\\n').map((line, index) => (\n      <span key={index}>\n        {line}\n        {index < content.split('\\n').length - 1 && <br />}\n      </span>\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <MobileHeader />\n      \n      <main className=\"flex-1 flex flex-col px-4\">\n        {/* Chat Header */}\n        <div className=\"mt-6 mb-4\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <Users className=\"w-5 h-5 text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold\">AI Investment Advisory Team</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Ask questions and get consensus advice from legendary investors\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-wrap gap-2 mt-3\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              Portfolio Analysis\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">Warren Buffett</Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">Cathie Wood</Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">Peter Lynch</Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">+2 more</Badge>\n          </div>\n        </div>\n\n        {/* Messages Area */}\n        <Card className=\"flex-1 mb-4\">\n          <CardContent className=\"p-0 h-full\">\n            <ScrollArea className=\"h-96 p-4\">\n              {messages.length === 0 ? (\n                <div className=\"flex flex-col items-center justify-center h-full text-center space-y-4\">\n                  <MessageSquare className=\"w-12 h-12 text-muted-foreground\" />\n                  <div>\n                    <h3 className=\"font-medium mb-2\">Welcome to the AI Investment Advisory</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Ask questions about your portfolio, market trends, or get investment advice from our AI investment team.\n                    </p>\n                  </div>\n                  <div className=\"bg-muted rounded-lg p-3 text-sm\">\n                    <p className=\"font-medium mb-1\">Try asking:</p>\n                    <ul className=\"text-muted-foreground space-y-1\">\n                      <li>• \"What do you think about my current portfolio?\"</li>\n                      <li>• \"Should I buy more tech stocks?\"</li>\n                      <li>• \"What are the risks in the current market?\"</li>\n                    </ul>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {messages.map((msg: any, index: number) => {\n                    console.log(\"Rendering message:\", msg);\n                    return (\n                      <div\n                        key={msg.id || `msg-${index}`}\n                        className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                      >\n                        <div\n                          className={`max-w-[85%] rounded-lg p-3 ${\n                            msg.role === 'user'\n                              ? 'bg-primary text-primary-foreground ml-12'\n                              : 'bg-muted mr-12'\n                          }`}\n                        >\n                          {msg.role === 'assistant' && (\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center\">\n                                <Users className=\"w-3 h-3 text-primary\" />\n                              </div>\n                              <span className=\"text-xs font-medium\">Investment Advisory Team</span>\n                              {msg.metadata?.consensusScore && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {msg.metadata.consensusScore}% Consensus\n                                </Badge>\n                              )}\n                            </div>\n                          )}\n                          <div className=\"text-sm\">\n                            {formatMessage(msg.content)}\n                          </div>\n                          <div className=\"text-xs opacity-70 mt-2\">\n                            {new Date(msg.createdAt).toLocaleTimeString([], { \n                              hour: '2-digit', \n                              minute: '2-digit' \n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <div ref={messagesEndRef} />\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Message Input */}\n        <div className=\"mb-20\">\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"Ask the investment team a question...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={sendMessageMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"input-chat-message\"\n            />\n            <Button \n              onClick={handleSendMessage}\n              disabled={!message.trim() || sendMessageMutation.isPending || !currentConversationId}\n              data-testid=\"button-send-message\"\n            >\n              {sendMessageMutation.isPending ? (\n                <div className=\"w-4 h-4 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\n              ) : (\n                <Send className=\"w-4 h-4\" />\n              )}\n            </Button>\n          </div>\n          \n          {sendMessageMutation.isPending && (\n            <div className=\"mt-2 text-sm text-muted-foreground flex items-center space-x-2\">\n              <div className=\"w-3 h-3 animate-spin rounded-full border border-primary border-t-transparent\" />\n              <span>The investment team is analyzing your question...</span>\n            </div>\n          )}\n        </div>\n      </main>\n\n      <BottomNavigation currentPage=\"chat\" />\n    </div>\n  );\n}","size_bytes":11895},"client/src/pages/debates.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageSquare, Users, TrendingUp } from \"lucide-react\";\n\nexport default function Debates() {\n  const { data: debates = [], isLoading } = useQuery({\n    queryKey: ['/api/debates'],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <MobileHeader />\n      \n      <main className=\"px-4 pb-20\">\n        <section className=\"mt-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Active Debates</h2>\n          \n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n                  <div className=\"h-24 bg-muted rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : debates.length > 0 ? (\n            <div className=\"space-y-4\">\n              {debates.map((debate: any) => (\n                <div key={debate.id} className=\"bg-card rounded-lg p-4 border border-border\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold mb-2\">{debate.title}</h3>\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Users className=\"w-4 h-4\" />\n                          <span>{debate.participants?.length || 0} investors</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <MessageSquare className=\"w-4 h-4\" />\n                          <span>{debate.messages?.length || 0} messages</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={debate.status === \"ACTIVE\" ? \"default\" : \"secondary\"}>\n                        {debate.status}\n                      </Badge>\n                      {debate.consensusScore && (\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          Consensus: {debate.consensusScore}%\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {debate.messages && debate.messages.length > 0 && (\n                    <div className=\"bg-muted/50 rounded-lg p-3 mb-3\">\n                      <div className=\"text-sm font-medium mb-1\">Latest Message</div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {debate.messages[debate.messages.length - 1]?.message}\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button \n                      className=\"flex-1\" \n                      size=\"sm\"\n                      data-testid={`button-join-debate-${debate.id}`}\n                    >\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      Join Debate\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      data-testid={`button-view-debate-${debate.id}`}\n                    >\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg p-8 border border-border text-center\">\n              <MessageSquare className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <div className=\"text-muted-foreground mb-2\">No active debates</div>\n              <p className=\"text-sm text-muted-foreground\">\n                Debates will appear when AI investors have different opinions on stocks\n              </p>\n            </div>\n          )}\n        </section>\n\n        {/* Featured Debate Topics */}\n        <section className=\"mt-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Trending Topics</h2>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"bg-card rounded-lg p-4 border border-border text-center\">\n              <TrendingUp className=\"w-8 h-8 text-emerald-500 mx-auto mb-2\" />\n              <div className=\"text-sm font-medium\">AI Stocks</div>\n              <div className=\"text-xs text-muted-foreground\">3 debates</div>\n            </div>\n            <div className=\"bg-card rounded-lg p-4 border border-border text-center\">\n              <TrendingUp className=\"w-8 h-8 text-yellow-500 mx-auto mb-2\" />\n              <div className=\"text-sm font-medium\">EV Market</div>\n              <div className=\"text-xs text-muted-foreground\">2 debates</div>\n            </div>\n            <div className=\"bg-card rounded-lg p-4 border border-border text-center\">\n              <TrendingUp className=\"w-8 h-8 text-blue-500 mx-auto mb-2\" />\n              <div className=\"text-sm font-medium\">Banking</div>\n              <div className=\"text-xs text-muted-foreground\">1 debate</div>\n            </div>\n            <div className=\"bg-card rounded-lg p-4 border border-border text-center\">\n              <TrendingUp className=\"w-8 h-8 text-purple-500 mx-auto mb-2\" />\n              <div className=\"text-sm font-medium\">Energy</div>\n              <div className=\"text-xs text-muted-foreground\">1 debate</div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <BottomNavigation currentPage=\"debates\" />\n    </div>\n  );\n}\n","size_bytes":5905},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport PortfolioSummary from \"@/components/portfolio-summary\";\nimport PersonaAvatars from \"@/components/persona-avatars\";\nimport StockAnalysisCard from \"@/components/stock-analysis-card\";\nimport NewsCard from \"@/components/news-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Home() {\n  const { data: analyses = [], isLoading: analysesLoading } = useQuery({\n    queryKey: ['/api/analyses/latest'],\n  });\n\n  const { data: news = [], isLoading: newsLoading } = useQuery({\n    queryKey: ['/api/news'],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <MobileHeader />\n      \n      <main className=\"px-4 pb-20\">\n        <PortfolioSummary />\n        <PersonaAvatars />\n        \n        {/* Latest Analysis Section */}\n        <section className=\"mt-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Latest Analysis</h2>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-primary\" data-testid=\"link-view-all-analysis\">\n              View All\n            </Button>\n          </div>\n          \n          {analysesLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2].map(i => (\n                <div key={i} className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n                  <div className=\"h-20 bg-muted rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : analyses.length > 0 ? (\n            <div className=\"space-y-4\">\n              {analyses.slice(0, 3).map((analysis: any) => (\n                <StockAnalysisCard \n                  key={analysis.id} \n                  analysis={analysis}\n                  stock={analysis.stock}\n                  personas={[analysis.persona]}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg p-6 border border-border text-center\">\n              <p className=\"text-muted-foreground\">No stock analyses yet</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Search for a stock to get AI investment opinions\n              </p>\n            </div>\n          )}\n        </section>\n\n        {/* Market News Section */}\n        <section className=\"mt-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Market News</h2>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-primary\" data-testid=\"link-see-all-news\">\n              See All\n            </Button>\n          </div>\n          \n          {newsLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n                  <div className=\"flex space-x-3\">\n                    <div className=\"w-16 h-16 bg-muted rounded-lg\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-full\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : news.length > 0 ? (\n            <div className=\"space-y-3\">\n              {news.slice(0, 4).map((article: any, index: number) => (\n                <NewsCard key={index} article={article} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg p-6 border border-border text-center\">\n              <p className=\"text-muted-foreground\">No news available</p>\n            </div>\n          )}\n        </section>\n      </main>\n\n      {/* Floating Action Button */}\n      <Button \n        className=\"fixed bottom-20 right-4 w-14 h-14 rounded-full shadow-lg touch-feedback\"\n        data-testid=\"button-add-stock\"\n      >\n        <Plus className=\"w-6 h-6\" />\n      </Button>\n\n      <BottomNavigation currentPage=\"home\" />\n    </div>\n  );\n}\n","size_bytes":4320},"client/src/pages/news.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport NewsCard from \"@/components/news-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function News() {\n  const [activeTab, setActiveTab] = useState(\"market\");\n\n  const { data: marketNews = [], isLoading: marketLoading } = useQuery({\n    queryKey: ['/api/news'],\n  });\n\n  const { data: stockNews = [], isLoading: stockLoading } = useQuery({\n    queryKey: ['/api/news/stocks/AAPL'], // Example stock news\n    enabled: activeTab === \"stocks\",\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <MobileHeader />\n      \n      <main className=\"px-4 pb-20\">\n        <section className=\"mt-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Market News</h2>\n          \n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"market\" data-testid=\"tab-market-news\">Market</TabsTrigger>\n              <TabsTrigger value=\"stocks\" data-testid=\"tab-stock-news\">Stocks</TabsTrigger>\n              <TabsTrigger value=\"analysis\" data-testid=\"tab-analysis-news\">Analysis</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"market\" className=\"mt-6\">\n              {marketLoading ? (\n                <div className=\"space-y-3\">\n                  {[1, 2, 3, 4, 5].map(i => (\n                    <div key={i} className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n                      <div className=\"flex space-x-3\">\n                        <div className=\"w-16 h-16 bg-muted rounded-lg\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-muted rounded w-full\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : marketNews.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {marketNews.map((article: any, index: number) => (\n                    <NewsCard key={index} article={article} />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"bg-card rounded-lg p-8 border border-border text-center\">\n                  <p className=\"text-muted-foreground\">No market news available</p>\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"stocks\" className=\"mt-6\">\n              {stockLoading ? (\n                <div className=\"space-y-3\">\n                  {[1, 2, 3].map(i => (\n                    <div key={i} className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n                      <div className=\"flex space-x-3\">\n                        <div className=\"w-16 h-16 bg-muted rounded-lg\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-muted rounded w-full\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : stockNews.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {stockNews.map((article: any, index: number) => (\n                    <NewsCard key={index} article={article} showStockImpact />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"bg-card rounded-lg p-8 border border-border text-center\">\n                  <p className=\"text-muted-foreground\">No stock-specific news available</p>\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"analysis\" className=\"mt-6\">\n              <div className=\"bg-card rounded-lg p-8 border border-border text-center\">\n                <p className=\"text-muted-foreground\">AI-powered news analysis coming soon</p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </section>\n\n        {/* News Categories */}\n        <section className=\"mt-8\">\n          <h2 className=\"text-lg font-semibold mb-4\">Categories</h2>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Technology</div>\n                <div className=\"text-sm text-muted-foreground\">12 articles</div>\n              </div>\n            </Button>\n            <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Finance</div>\n                <div className=\"text-sm text-muted-foreground\">8 articles</div>\n              </div>\n            </Button>\n            <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Energy</div>\n                <div className=\"text-sm text-muted-foreground\">5 articles</div>\n              </div>\n            </Button>\n            <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Healthcare</div>\n                <div className=\"text-sm text-muted-foreground\">3 articles</div>\n              </div>\n            </Button>\n          </div>\n        </section>\n      </main>\n\n      <BottomNavigation currentPage=\"news\" />\n    </div>\n  );\n}\n","size_bytes":6073},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/portfolio.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport ConsensusBar from \"@/components/consensus-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { TrendingUp, TrendingDown, Plus } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst addPositionSchema = z.object({\n  symbol: z.string().min(1, \"Stock symbol is required\").max(10, \"Symbol too long\"),\n  shares: z.string().transform(val => parseFloat(val)).refine(val => val > 0, \"Shares must be greater than 0\"),\n  price: z.string().transform(val => parseFloat(val)).refine(val => val > 0, \"Price must be greater than 0\")\n});\n\ntype AddPositionFormData = z.infer<typeof addPositionSchema>;\n\nexport default function Portfolio() {\n  const [showAddPosition, setShowAddPosition] = useState(false);\n  const { toast } = useToast();\n  const { data: portfolio, isLoading } = useQuery({\n    queryKey: ['/api/portfolio'],\n  });\n\n  const positions = portfolio?.positions || [];\n  const summary = portfolio?.summary || {\n    totalValue: 0,\n    totalReturn: 0,\n    totalReturnPercent: 0,\n    consensusScore: 0\n  };\n\n  const form = useForm<AddPositionFormData>({\n    resolver: zodResolver(addPositionSchema),\n    defaultValues: {\n      symbol: \"\",\n      shares: \"\",\n      price: \"\"\n    }\n  });\n\n  const addPositionMutation = useMutation({\n    mutationFn: async (data: AddPositionFormData) => {\n      const response = await apiRequest('POST', '/api/portfolio', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Position Added\",\n        description: \"Stock position has been added to your portfolio.\",\n      });\n      setShowAddPosition(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Add Position\",\n        description: error.message || \"Failed to add position to portfolio\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddPosition = () => {\n    setShowAddPosition(true);\n  };\n\n  const onSubmit = (data: AddPositionFormData) => {\n    addPositionMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <MobileHeader />\n      \n      <main className=\"px-4 pb-20\">\n        {/* Portfolio Summary */}\n        <section className=\"mt-6\">\n          <div className=\"bg-card rounded-lg p-4 border border-border\">\n            <h2 className=\"text-lg font-semibold mb-3\">Portfolio Performance</h2>\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <div className={`text-2xl font-bold ${summary.totalReturn >= 0 ? 'text-emerald-500' : 'text-destructive'}`}>\n                  ${summary.totalValue.toLocaleString()}\n                </div>\n                <div className={`text-sm flex items-center ${summary.totalReturn >= 0 ? 'text-emerald-500' : 'text-destructive'}`}>\n                  {summary.totalReturn >= 0 ? (\n                    <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  ) : (\n                    <TrendingDown className=\"w-4 h-4 mr-1\" />\n                  )}\n                  <span>\n                    {summary.totalReturnPercent >= 0 ? '+' : ''}{summary.totalReturnPercent.toFixed(2)}% \n                    ({summary.totalReturn >= 0 ? '+' : ''}${summary.totalReturn.toLocaleString()})\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-muted-foreground\">AI Consensus</div>\n                <div className=\"text-lg font-semibold text-emerald-500\">\n                  {summary.consensusScore.toFixed(0)}%\n                </div>\n              </div>\n            </div>\n            \n            <ConsensusBar score={summary.consensusScore} />\n          </div>\n        </section>\n\n        {/* Holdings */}\n        <section className=\"mt-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Holdings</h2>\n            <Button size=\"sm\" onClick={handleAddPosition} data-testid=\"button-add-position\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Position\n            </Button>\n          </div>\n          \n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"bg-card rounded-lg p-4 border border-border animate-pulse\">\n                  <div className=\"h-16 bg-muted rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : positions.length > 0 ? (\n            <div className=\"space-y-3\">\n              {positions.map((position: any) => (\n                <div key={position.id} className=\"bg-card rounded-lg p-4 border border-border\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-lg font-bold text-primary\">\n                          {position.stock?.symbol}\n                        </span>\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold\">{position.stock?.name}</h3>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {parseFloat(position.shares).toFixed(2)} shares @ ${parseFloat(position.averagePrice).toFixed(2)}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`font-semibold ${(position.returnPercent || 0) >= 0 ? 'text-emerald-500' : 'text-destructive'}`}>\n                        {(position.returnPercent || 0) >= 0 ? '+' : ''}{parseFloat(position.returnPercent || '0').toFixed(2)}%\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        ${parseFloat(position.currentValue || '0').toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {position.consensusScore && (\n                    <div className=\"mt-3\">\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-muted-foreground\">AI Consensus</span>\n                        <span className=\"font-medium\">{position.consensusScore}%</span>\n                      </div>\n                      <ConsensusBar score={position.consensusScore} size=\"sm\" />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg p-8 border border-border text-center\">\n              <div className=\"text-muted-foreground mb-4\">Your portfolio is empty</div>\n              <Button onClick={handleAddPosition} data-testid=\"button-start-investing\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Start Investing\n              </Button>\n            </div>\n          )}\n        </section>\n\n        {/* Performance Metrics */}\n        {positions.length > 0 && (\n          <section className=\"mt-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">Performance Metrics</h2>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"bg-card rounded-lg p-4 border border-border text-center\">\n                <div className=\"text-2xl font-bold text-emerald-500\">\n                  {positions.length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Positions</div>\n              </div>\n              <div className=\"bg-card rounded-lg p-4 border border-border text-center\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {summary.consensusScore.toFixed(0)}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Avg Consensus</div>\n              </div>\n            </div>\n          </section>\n        )}\n      </main>\n\n      <BottomNavigation currentPage=\"portfolio\" />\n      \n      {/* Add Position Dialog */}\n      <Dialog open={showAddPosition} onOpenChange={setShowAddPosition}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Add Position</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"symbol\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Stock Symbol</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"AAPL\" {...field} data-testid=\"input-symbol\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"shares\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Number of Shares</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"100\" {...field} data-testid=\"input-shares\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Purchase Price</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"150.00\" {...field} data-testid=\"input-price\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddPosition(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={addPositionMutation.isPending} data-testid=\"button-save-position\">\n                  {addPositionMutation.isPending ? \"Adding...\" : \"Add Position\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":11280},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}